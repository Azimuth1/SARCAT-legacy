{"version":3,"sources":["email/email.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,0C;AACA,mC;AACA,4D;;AAEA,W;AACA,e;;AAEA,yC;AACA,+C;AACA,mC;AACA,qD;AACA,wD;;AAEA,6B;AACA,mB;AACA,qB;AACA,2C;AACA,2D;AACA,4D;AACA,G;;AAEA,6C;AACA,yC;AACA,4B;AACA,iD;AACA,uC;AACA,mD;AACA,oB;;AAEA,2E;AACA,c;AACA,E;;AAEA,kC;AACA,4E;AACA,8C;AACA,iC;AACA,Y;AACA,gB;AACA,uB;AACA,G;;AAEA,6B;AACA,mC;;AAEA,gB;AACA,oD;AACA,2B;AACA,yB;AACA,E;;AAEA,6C;AACA,iC;AACA,E;;AAEA,iC;AACA,+C;;AAEA,6B;;AAEA,8E;AACA,sE;AACA,uE;AACA,2C;AACA,qB;AACA,gC;AACA,0B;AACA,4B;AACA,sE;AACA,uB;AACA,K;AACA,gB;AACA,E;;AAEA,oC;AACA,2C;AACA,E;;AAEA,G;AACA,uE;AACA,E;AACA,sE;AACA,mE;AACA,yB;AACA,G;AACA,mB;AACA,mC;AACA,oB;AACA,E;;AAEA,oB;AACA,G;AACA,iB;AACA,E;AACA,sE;AACA,4E;AACA,2E;AACA,kC;AACA,E;AACA,iB;AACA,uD;AACA,gE;AACA,gE;AACA,kE;AACA,2E;AACA,0D;AACA,8D;AACA,wD;AACA,sE;AACA,G;;AAEA,4B;AACA,G;AACA,8E;AACA,8D;AACA,+D;AACA,gB;AACA,0B;AACA,0D;AACA,qD;AACA,oD;AACA,qD;AACA,4E;AACA,iE;AACA,G;AACA,iC;AACA,4C;AACA,gC;AACA,a;;AAEA,8B;;AAEA,uB;AACA,4E;AACA,sB;AACA,uB;AACA,uB;AACA,mB;AACA,mB;AACA,qB;AACA,6B;AACA,6B;AACA,uB;AACA,sB;AACA,K;;AAEA,kD;AACA,8B;AACA,K;;AAEA,uB;AACA,a;AACA,uB;AACA,U;AACA,oB;AACA,G;AACA,E","file":"/packages/email.js","sourcesContent":["var Future = Npm.require('fibers/future');\nvar urlModule = Npm.require('url');\nvar MailComposer = Npm.require('mailcomposer').MailComposer;\n\nEmail = {};\nEmailTest = {};\n\nvar makePool = function (mailUrlString) {\n  var mailUrl = urlModule.parse(mailUrlString);\n  if (mailUrl.protocol !== 'smtp:')\n    throw new Error(\"Email protocol in $MAIL_URL (\" +\n                    mailUrlString + \") must be 'smtp'\");\n\n  var port = +(mailUrl.port);\n  var auth = false;\n  if (mailUrl.auth) {\n    var parts = mailUrl.auth.split(':', 2);\n    auth = {user: parts[0] && decodeURIComponent(parts[0]),\n            pass: parts[1] && decodeURIComponent(parts[1])};\n  }\n\n  var simplesmtp = Npm.require('simplesmtp');\n  var pool = simplesmtp.createClientPool(\n    port,  // Defaults to 25\n    mailUrl.hostname,  // Defaults to \"localhost\"\n    { secureConnection: (port === 465),\n      // XXX allow maxConnections to be configured?\n      auth: auth });\n\n  pool._future_wrapped_sendMail = _.bind(Future.wrap(pool.sendMail), pool);\n  return pool;\n};\n\nvar getPool = _.once(function () {\n  // We delay this check until the first call to Email.send, in case someone\n  // set process.env.MAIL_URL in startup code.\n  var url = process.env.MAIL_URL;\n  if (! url)\n    return null;\n  return makePool(url);\n});\n\nvar next_devmode_mail_id = 0;\nvar output_stream = process.stdout;\n\n// Testing hooks\nEmailTest.overrideOutputStream = function (stream) {\n  next_devmode_mail_id = 0;\n  output_stream = stream;\n};\n\nEmailTest.restoreOutputStream = function () {\n  output_stream = process.stdout;\n};\n\nvar devModeSend = function (mc) {\n  var devmode_mail_id = next_devmode_mail_id++;\n\n  var stream = output_stream;\n\n  // This approach does not prevent other writers to stdout from interleaving.\n  stream.write(\"====== BEGIN MAIL #\" + devmode_mail_id + \" ======\\n\");\n  stream.write(\"(Mail not sent; to enable sending, set the MAIL_URL \" +\n               \"environment variable.)\\n\");\n  mc.streamMessage();\n  mc.pipe(stream, {end: false});\n  var future = new Future;\n  mc.on('end', function () {\n    stream.write(\"====== END MAIL #\" + devmode_mail_id + \" ======\\n\");\n    future['return']();\n  });\n  future.wait();\n};\n\nvar smtpSend = function (pool, mc) {\n  pool._future_wrapped_sendMail(mc).wait();\n};\n\n/**\n * Mock out email sending (eg, during a test.) This is private for now.\n *\n * f receives the arguments to Email.send and should return true to go\n * ahead and send the email (or at least, try subsequent hooks), or\n * false to skip sending.\n */\nvar sendHooks = [];\nEmailTest.hookSend = function (f) {\n  sendHooks.push(f);\n};\n\n// Old comment below\n/**\n * Send an email.\n *\n * Connects to the mail server configured via the MAIL_URL environment\n * variable. If unset, prints formatted message to stdout. The \"from\" option\n * is required, and at least one of \"to\", \"cc\", and \"bcc\" must be provided;\n * all other options are optional.\n *\n * @param options\n * @param options.from {String} RFC5322 \"From:\" address\n * @param options.to {String|String[]} RFC5322 \"To:\" address[es]\n * @param options.cc {String|String[]} RFC5322 \"Cc:\" address[es]\n * @param options.bcc {String|String[]} RFC5322 \"Bcc:\" address[es]\n * @param options.replyTo {String|String[]} RFC5322 \"Reply-To:\" address[es]\n * @param options.subject {String} RFC5322 \"Subject:\" line\n * @param options.text {String} RFC5322 mail body (plain text)\n * @param options.html {String} RFC5322 mail body (HTML)\n * @param options.headers {Object} custom RFC5322 headers (dictionary)\n */\n\n// New API doc comment below\n/**\n * @summary Send an email. Throws an `Error` on failure to contact mail server\n * or if mail server returns an error. All fields should match\n * [RFC5322](http://tools.ietf.org/html/rfc5322) specification.\n * @locus Server\n * @param {Object} options\n * @param {String} options.from \"From:\" address (required)\n * @param {String|String[]} options.to,cc,bcc,replyTo\n *   \"To:\", \"Cc:\", \"Bcc:\", and \"Reply-To:\" addresses\n * @param {String} [options.subject]  \"Subject:\" line\n * @param {String} [options.text|html] Mail body (in plain text and/or HTML)\n * @param {Object} [options.headers] Dictionary of custom headers\n */\nEmail.send = function (options) {\n  for (var i = 0; i < sendHooks.length; i++)\n    if (! sendHooks[i](options))\n      return;\n\n  var mc = new MailComposer();\n\n  // setup message data\n  // XXX support attachments (once we have a client/server-compatible binary\n  //     Buffer class)\n  mc.setMessageOption({\n    from: options.from,\n    to: options.to,\n    cc: options.cc,\n    bcc: options.bcc,\n    replyTo: options.replyTo,\n    subject: options.subject,\n    text: options.text,\n    html: options.html\n  });\n\n  _.each(options.headers, function (value, name) {\n    mc.addHeader(name, value);\n  });\n\n  var pool = getPool();\n  if (pool) {\n    smtpSend(pool, mc);\n  } else {\n    devModeSend(mc);\n  }\n};\n"]}