{"version":3,"file":"/packages/mrt:moment.js","sources":["mrt:moment/lib/moment/moment.js","mrt:moment/export-moment.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,a;AACA,mB;AACA,8D;AACA,iB;AACA,gB;;AAEA,uB;AACA,yC;AACA,iB;AACA,yC;;AAEA,e;AACA,0B;AACA,oE;AACA,oE;AACA,wB;AACA,2B;AACA,U;;AAEA,iB;AACA,kB;AACA,iB;AACA,iB;AACA,mB;AACA,mB;AACA,wB;;AAEA,mD;AACA,qB;;AAEA,yE;AACA,8B;;AAEA,2B;AACA,sE;;AAEA,yC;AACA,gD;AACA,yF;;AAEA,oG;AACA,oF;AACA,2J;;AAEA,wB;AACA,8L;AACA,yE;;AAEA,gC;AACA,qD;AACA,0D;AACA,0D;AACA,yE;AACA,6D;AACA,iO;AACA,sF;AACA,gD;AACA,oF;AACA,sC;;AAEA,gC;AACA,2C;AACA,gD;AACA,qD;AACA,sD;AACA,iE;AACA,0D;;AAEA,yB;AACA,oH;AACA,+J;;AAEA,2C;;AAEA,oB;AACA,sD;AACA,gD;AACA,gD;AACA,2C;AACA,uC;AACA,U;;AAEA,uC;AACA,oB;AACA,0D;AACA,gD;AACA,wC;AACA,+B;AACA,U;;AAEA,8E;AACA,iD;;AAEA,kC;AACA,sF;AACA,kC;AACA,+B;AACA,4B;AACA,4B;AACA,2B;AACA,2B;AACA,8B;AACA,6B;AACA,U;;AAEA,uB;AACA,+B;AACA,yB;AACA,yB;AACA,uB;AACA,sB;AACA,uB;AACA,uB;AACA,0B;AACA,wB;AACA,0B;AACA,uB;AACA,8B;AACA,0B;AACA,6B;AACA,2B;AACA,6B;AACA,U;;AAEA,0B;AACA,oC;AACA,sC;AACA,gC;AACA,kC;AACA,uC;AACA,U;;AAEA,kC;AACA,6B;;AAEA,2C;AACA,kC;AACA,wC;AACA,sC;AACA,mC;AACA,oC;AACA,qC;AACA,U;;AAEA,uC;AACA,sD;AACA,oD;;AAEA,gC;AACA,gC;AACA,wC;AACA,c;AACA,sC;AACA,mE;AACA,c;AACA,sC;AACA,8D;AACA,c;AACA,gC;AACA,mC;AACA,c;AACA,gC;AACA,wC;AACA,c;AACA,gC;AACA,kC;AACA,c;AACA,sC;AACA,mE;AACA,c;AACA,sC;AACA,qE;AACA,c;AACA,sC;AACA,gE;AACA,c;AACA,gC;AACA,mC;AACA,c;AACA,gC;AACA,sC;AACA,c;AACA,gC;AACA,0D;AACA,c;AACA,gC;AACA,oD;AACA,c;AACA,iC;AACA,oD;AACA,c;AACA,kC;AACA,+D;AACA,2D;AACA,c;AACA,gC;AACA,8D;AACA,c;AACA,gC;AACA,wD;AACA,c;AACA,iC;AACA,wD;AACA,c;AACA,gC;AACA,iE;AACA,c;AACA,gC;AACA,2D;AACA,c;AACA,iC;AACA,2D;AACA,c;AACA,6B;AACA,sC;AACA,c;AACA,6B;AACA,yC;AACA,c;AACA,gC;AACA,sF;AACA,c;AACA,gC;AACA,uF;AACA,c;AACA,gC;AACA,oC;AACA,c;AACA,gC;AACA,+C;AACA,c;AACA,gC;AACA,sC;AACA,c;AACA,gC;AACA,sC;AACA,c;AACA,gC;AACA,wD;AACA,c;AACA,gC;AACA,wE;AACA,c;AACA,gC;AACA,4D;AACA,c;AACA,gC;AACA,4D;AACA,c;AACA,gC;AACA,qC;AACA,4B;AACA,4B;AACA,2B;AACA,4B;AACA,iB;AACA,iG;AACA,c;AACA,gC;AACA,qC;AACA,4B;AACA,4B;AACA,2B;AACA,4B;AACA,iB;AACA,2F;AACA,c;AACA,6B;AACA,uC;AACA,c;AACA,8B;AACA,uC;AACA,c;AACA,gC;AACA,mC;AACA,c;AACA,6B;AACA,sC;AACA,a;AACA,U;;AAEA,0B;;AAEA,sF;;AAEA,uE;AACA,e;AACA,2B;AACA,mC;AACA,6C;AACA,6D;AACA,qD;AACA,S;AACA,K;;AAEA,oC;AACA,0E;AACA,mB;AACA,gB;AACA,0B;AACA,8B;AACA,6B;AACA,0B;AACA,8B;AACA,8B;AACA,gC;AACA,kC;AACA,oC;AACA,sB;AACA,U;AACA,K;;AAEA,4B;AACA,2D;AACA,iE;AACA,wD;AACA,S;AACA,K;;AAEA,iC;AACA,6B;AACA,mC;AACA,4B;AACA,8B;AACA,kC;AACA,a;AACA,6C;AACA,e;AACA,K;;AAEA,yC;AACA,kC;AACA,0B;AACA,sC;AACA,S;AACA,K;;AAEA,oC;AACA,6B;AACA,2D;AACA,U;AACA,K;AACA,4C;AACA,6B;AACA,yE;AACA,U;AACA,K;;AAEA,qC;AACA,mC;AACA,oF;AACA,K;AACA,iC;AACA,+B;AACA,2E;AACA,K;AACA,sE;;;AAGA,yC;AACA,oB;AACA,yC;;AAEA,uB;AACA,K;;AAEA,8B;AACA,2C;AACA,qC;AACA,kC;AACA,S;AACA,iC;AACA,uC;AACA,K;;AAEA,2B;AACA,iC;AACA,6D;AACA,8C;AACA,oD;AACA,gD;AACA,8C;AACA,4C;AACA,8C;AACA,kD;AACA,kD;AACA,4D;;AAEA,2C;AACA,4C;AACA,mC;AACA,wC;AACA,2C;AACA,uE;AACA,wE;AACA,4B;AACA,sB;AACA,sE;AACA,sE;AACA,yB;AACA,gC;AACA,0B;AACA,uB;;AAEA,wB;;AAEA,2C;;AAEA,uB;AACA,K;;AAEA,yC;AACA,e;AACA,yC;;;AAGA,2B;AACA,0B;AACA,sC;AACA,4B;AACA,a;AACA,S;;AAEA,2C;AACA,oC;AACA,S;;AAEA,0C;AACA,kC;AACA,S;;AAEA,iB;AACA,K;;AAEA,mC;AACA,yB;;AAEA,2D;AACA,wD;AACA,S;AACA,6C;AACA,4B;AACA,S;AACA,6C;AACA,4B;AACA,S;AACA,6C;AACA,4B;AACA,S;AACA,kD;AACA,sC;AACA,S;AACA,+C;AACA,gC;AACA,S;AACA,iD;AACA,oC;AACA,S;AACA,kD;AACA,sC;AACA,S;AACA,8C;AACA,8B;AACA,S;AACA,kD;AACA,sC;AACA,S;;AAEA,0C;AACA,yC;AACA,2C;AACA,iC;AACA,iD;AACA,mC;AACA,iB;AACA,a;AACA,S;;AAEA,kB;AACA,K;;AAEA,+B;AACA,yB;AACA,qC;AACA,gB;AACA,sC;AACA,S;AACA,K;;AAEA,8B;AACA,yE;AACA,4D;AACA,2C;AACA,+B;;AAEA,8C;AACA,kC;AACA,S;AACA,8D;AACA,K;;AAEA,qD;AACA,+C;;AAEA,mD;AACA,8C;AACA,+D;AACA,yB;AACA,S;;AAEA,yE;;AAEA,mB;AACA,K;;AAEA,6C;AACA,gB;AACA,oC;AACA,mC;AACA,yD;AACA,gB;AACA,yD;AACA,iD;AACA,qC;AACA,S;;AAEA,mB;AACA,K;;AAEA,2D;AACA,2C;AACA,uC;AACA,yB;AACA,yD;AACA,qD;AACA,iJ;AACA,sD;AACA,a;;AAEA,uD;AACA,+C;AACA,kE;AACA,wB;AACA,U;AACA,K;;AAEA,qF;AACA,kD;AACA,kC;AACA,sC;AACA,kE;;AAEA,2B;AACA,8D;AACA,S;AACA,mB;AACA,6E;AACA,S;AACA,qB;AACA,6E;AACA,S;AACA,2B;AACA,qD;AACA,S;AACA,K;;AAEA,2B;AACA,6B;AACA,0E;AACA,K;;AAEA,4B;AACA,2E;AACA,kC;AACA,K;;AAEA,2D;AACA,yD;AACA,yD;AACA,iE;AACA,sB;AACA,c;AACA,mC;AACA,2D;AACA,0E;AACA,wB;AACA,a;AACA,S;AACA,kC;AACA,K;;AAEA,oC;AACA,oB;AACA,qE;AACA,6E;AACA,S;AACA,qB;AACA,K;;AAEA,gD;AACA,iC;AACA,2B;AACA,iB;;AAEA,mC;AACA,mD;AACA,sD;AACA,qC;AACA,wE;AACA,iB;AACA,a;AACA,S;;AAEA,+B;AACA,K;;AAEA,8B;AACA,0B;;AAEA,0C;AACA,sB;AACA,2B;AACA,S;AACA,gD;AACA,uB;AACA,6B;AACA,S;AACA,c;AACA,mB;AACA,S;;AAEA,kD;AACA,0B;AACA,+C;AACA,6B;;AAEA,6C;AACA,+B;AACA,mC;AACA,a;;AAEA,mC;AACA,sD;AACA,oE;AACA,c;;AAEA,gC;AACA,qC;AACA,a;AACA,kB;AACA,6C;AACA,4C;AACA,iB;AACA,+B;AACA,a;AACA,U;AACA,K;;AAEA,yC;AACA,iD;AACA,sB;;AAEA,6D;AACA,qC;AACA,kD;AACA,oB;AACA,iD;AACA,a;AACA,S;;AAEA,qB;AACA,K;;AAEA,uC;AACA,mE;AACA,K;;AAEA,0C;AACA,6E;AACA,K;;AAEA,+B;AACA,4C;AACA,K;;AAEA,+B;AACA,wE;AACA,K;;AAEA,+B;AACA,qB;AACA,4C;AACA,sB;AACA,6D;AACA,4F;AACA,0D;AACA,gE;AACA,gE;AACA,gF;AACA,mB;;AAEA,mF;AACA,gC;AACA,a;;AAEA,sC;AACA,S;AACA,K;;AAEA,yB;AACA,iC;AACA,kD;AACA,qC;AACA,+B;AACA,sC;AACA,mC;AACA,uC;AACA,uC;;AAEA,4B;AACA,0C;AACA,gD;AACA,oD;AACA,a;AACA,S;AACA,0B;AACA,K;;AAEA,mC;AACA,+D;AACA,K;;AAEA,qC;AACA,gG;AACA,mI;AACA,kC;AACA,0C;;AAEA,kC;AACA,yD;AACA,6B;AACA,iD;AACA,iD;AACA,2B;AACA,iE;AACA,6B;AACA,kC;AACA,iB;AACA,4F;AACA,0F;AACA,0B;AACA,iB;AACA,oB;AACA,a;AACA,gB;AACA,S;AACA,oB;AACA,K;;AAEA,+B;AACA,6B;AACA,0C;AACA,iB;AACA,4C;AACA,4C;AACA,2H;AACA,yC;AACA,2B;AACA,S;AACA,6B;AACA,K;;AAEA,8E;AACA,mC;AACA,sE;AACA,kC;AACA,K;;AAEA,yC;AACA,c;AACA,yC;;;AAGA,8B;;AAEA,iC;AACA,wB;AACA,+B;AACA,iC;AACA,iD;AACA,mC;AACA,wB;AACA,yC;AACA,iB;AACA,a;AACA,U;;AAEA,qH;AACA,+B;AACA,2C;AACA,U;;AAEA,oF;AACA,oC;AACA,gD;AACA,U;;AAEA,4C;AACA,8B;;AAEA,qC;AACA,uC;AACA,a;;AAEA,sC;AACA,6D;AACA,4C;AACA,gD;AACA,0F;AACA,mF;AACA,iB;AACA,iC;AACA,2D;AACA,6B;AACA,iB;AACA,a;AACA,U;;AAEA,0F;AACA,iC;AACA,2C;AACA,U;;AAEA,kE;AACA,sC;AACA,gD;AACA,U;;AAEA,yD;AACA,oC;AACA,8C;AACA,U;;AAEA,gD;AACA,8B;;AAEA,uC;AACA,yC;AACA,a;;AAEA,qC;AACA,6D;AACA,8C;AACA,mD;AACA,iI;AACA,qF;AACA,iB;AACA,iC;AACA,+D;AACA,6B;AACA,iB;AACA,a;AACA,U;;AAEA,2B;AACA,0B;AACA,6B;AACA,gC;AACA,oC;AACA,0C;AACA,U;AACA,yC;AACA,mD;AACA,qE;AACA,6G;AACA,wC;AACA,mB;AACA,mD;AACA,a;AACA,0B;AACA,U;;AAEA,iC;AACA,8F;AACA,sD;AACA,kE;AACA,U;;AAEA,yC;AACA,uD;AACA,6B;AACA,6C;AACA,oB;AACA,6C;AACA,a;AACA,U;;AAEA,qB;AACA,sC;AACA,yC;AACA,sC;AACA,0C;AACA,6C;AACA,0B;AACA,U;AACA,wC;AACA,6C;AACA,6E;AACA,U;;AAEA,yB;AACA,6B;AACA,4B;AACA,gC;AACA,2B;AACA,8B;AACA,0B;AACA,4B;AACA,wB;AACA,2B;AACA,0B;AACA,6B;AACA,yB;AACA,2B;AACA,U;;AAEA,2E;AACA,oD;AACA,mD;AACA,iE;AACA,8C;AACA,U;;AAEA,8C;AACA,0E;AACA,iG;AACA,U;;AAEA,qC;AACA,uD;AACA,U;AACA,wB;;AAEA,sC;AACA,0B;AACA,U;;AAEA,wC;AACA,0B;AACA,U;;AAEA,+B;AACA,wE;AACA,U;;AAEA,iB;AACA,4D;AACA,qF;AACA,U;;AAEA,qC;AACA,kC;AACA,qC;AACA,S;AACA,O;;AAEA,yC;AACA,kB;AACA,yC;;;AAGA,4C;AACA,sC;AACA,iD;AACA,S;AACA,wC;AACA,K;;AAEA,yC;AACA,8D;;AAEA,6D;AACA,iD;AACA,0D;AACA,oB;AACA,4D;AACA,a;AACA,S;;AAEA,+B;AACA,4B;AACA,0C;AACA,+F;AACA,a;AACA,0B;AACA,U;AACA,K;;AAEA,2C;AACA,sC;AACA,2B;AACA,gD;AACA,S;;AAEA,sD;;AAEA,uC;AACA,iE;AACA,S;;AAEA,0C;AACA,K;;AAEA,2C;AACA,kB;;AAEA,qD;AACA,yD;AACA,S;;AAEA,4C;AACA,8D;AACA,wF;AACA,gD;AACA,mB;AACA,S;;AAEA,sB;AACA,K;;;AAGA,yC;AACA,e;AACA,yC;;;AAGA,2C;AACA,mD;AACA,uC;AACA,wB;AACA,iB;AACA,sC;AACA,oB;AACA,yC;AACA,oB;AACA,oB;AACA,oB;AACA,6E;AACA,iB;AACA,iB;AACA,iB;AACA,0C;AACA,sB;AACA,qB;AACA,qB;AACA,qB;AACA,2E;AACA,iB;AACA,yB;AACA,0C;AACA,a;AACA,+B;AACA,kB;AACA,yB;AACA,2C;AACA,a;AACA,+B;AACA,mB;AACA,yB;AACA,6C;AACA,a;AACA,+B;AACA,mB;AACA,8C;AACA,mB;AACA,oB;AACA,kB;AACA,mB;AACA,oB;AACA,kC;AACA,iB;AACA,iB;AACA,iD;AACA,iB;AACA,yC;AACA,iB;AACA,kB;AACA,sC;AACA,iB;AACA,+B;AACA,oB;AACA,oC;AACA,kB;AACA,kB;AACA,kB;AACA,kB;AACA,kB;AACA,kB;AACA,kB;AACA,kB;AACA,kB;AACA,kB;AACA,kB;AACA,2E;AACA,iB;AACA,iB;AACA,iB;AACA,iB;AACA,iB;AACA,iB;AACA,iB;AACA,iB;AACA,iB;AACA,iB;AACA,iB;AACA,4C;AACA,kB;AACA,qC;AACA,iB;AACA,uF;AACA,qB;AACA,S;AACA,K;;AAEA,gD;AACA,8B;AACA,yE;AACA,4E;AACA,8E;AACA,yD;;AAEA,qD;AACA,K;;AAEA,+C;AACA,4D;AACA,yC;;AAEA,wB;AACA,kB;AACA,iB;AACA,gC;AACA,8D;AACA,a;AACA,kB;AACA,gB;AACA,wC;AACA,mB;AACA,gC;AACA,wD;AACA,a;AACA,kB;AACA,4C;AACA,qB;AACA,kD;AACA,wE;AACA,4B;AACA,yC;AACA,oB;AACA,gD;AACA,a;AACA,kB;AACA,uB;AACA,wC;AACA,mB;AACA,gC;AACA,mD;AACA,a;AACA,kB;AACA,mB;AACA,gC;AACA,iE;AACA,a;AACA,kB;AACA,sB;AACA,4C;AACA,qB;AACA,gC;AACA,iD;AACA,a;;AAEA,kB;AACA,e;AACA,mB;AACA,kE;AACA,kB;AACA,qB;AACA,sB;AACA,uB;AACA,+C;AACA,kB;AACA,kB;AACA,uC;AACA,kB;AACA,sD;AACA,kB;AACA,kB;AACA,wC;AACA,yC;AACA,wC;AACA,mB;AACA,+C;AACA,kB;AACA,iB;AACA,wC;AACA,mB;AACA,iD;AACA,kB;AACA,iB;AACA,wC;AACA,mB;AACA,iD;AACA,kB;AACA,sB;AACA,kB;AACA,mB;AACA,oB;AACA,qB;AACA,sE;AACA,kB;AACA,iC;AACA,iB;AACA,2D;AACA,kB;AACA,mB;AACA,wC;AACA,mB;AACA,kC;AACA,2D;AACA,kB;AACA,0B;AACA,kB;AACA,mB;AACA,oB;AACA,oD;AACA,wE;AACA,4B;AACA,4C;AACA,mC;AACA,oB;AACA,kD;AACA,a;AACA,kB;AACA,mC;AACA,iB;AACA,kB;AACA,iB;AACA,kB;AACA,iB;AACA,iB;AACA,iB;AACA,uC;AACA,+B;AACA,oB;AACA,oB;AACA,qB;AACA,uC;AACA,wB;AACA,4C;AACA,gD;AACA,a;AACA,kB;AACA,kB;AACA,kB;AACA,wC;AACA,+D;AACA,S;AACA,K;;AAEA,4C;AACA,uD;;AAEA,sB;AACA,yD;AACA,oB;AACA,oB;;AAEA,iF;AACA,yE;AACA,gF;AACA,2B;AACA,mF;AACA,+B;AACA,kC;AACA,gB;AACA,2C;AACA,2C;;AAEA,uF;AACA,+B;;AAEA,8B;AACA,sE;AACA,8B;AACA,oC;AACA,2B;AACA,iB;AACA,qC;AACA,yE;AACA,oC;AACA,oB;AACA,8C;AACA,8B;AACA,a;AACA,S;AACA,qE;;AAEA,oC;AACA,2C;AACA,K;;AAEA,kC;AACA,mD;AACA,iG;AACA,6D;AACA,qC;AACA,wD;;AAEA,wB;AACA,mB;AACA,S;;AAEA,+C;;AAEA,yD;AACA,+E;AACA,0C;AACA,S;;AAEA,8D;AACA,gC;AACA,gE;;AAEA,4D;AACA,qD;AACA,a;;AAEA,gE;AACA,kD;AACA,gD;AACA,S;;AAEA,mC;AACA,wE;AACA,6D;AACA,iD;AACA,qD;AACA,yD;AACA,qD;AACA,S;;AAEA,8D;AACA,4B;AACA,gG;AACA,S;;AAEA,iF;AACA,2E;AACA,0B;AACA,kC;AACA,6E;AACA,S;AACA,K;;AAEA,qC;AACA,4B;;AAEA,wB;AACA,mB;AACA,S;;AAEA,0D;AACA,qB;AACA,iC;AACA,kC;AACA,gC;AACA,iC;AACA,mC;AACA,mC;AACA,uC;AACA,U;;AAEA,+B;AACA,K;;AAEA,uC;AACA,6B;AACA,6B;AACA,oB;AACA,qC;AACA,kC;AACA,gC;AACA,c;AACA,gB;AACA,sE;AACA,S;AACA,K;;AAEA,yC;AACA,kD;AACA,4C;AACA,6B;AACA,mB;AACA,S;;AAEA,uB;AACA,gC;;AAEA,kF;AACA,oC;AACA,mD;AACA,yC;AACA,uC;;AAEA,uF;;AAEA,6C;AACA,8B;AACA,wF;AACA,8B;AACA,wE;AACA,yC;AACA,yD;AACA,iB;AACA,wF;AACA,6D;AACA,a;AACA,oD;AACA,8C;AACA,kC;AACA,6C;AACA,iB;AACA,sB;AACA,wD;AACA,iB;AACA,oE;AACA,a;AACA,sD;AACA,oD;AACA,a;AACA,S;;AAEA,4D;AACA,yE;AACA,gC;AACA,gD;AACA,S;;AAEA,uB;AACA,mD;AACA,kC;AACA,S;AACA,yC;AACA,+D;AACA,gC;AACA,S;;AAEA,+B;AACA,8B;AACA,K;;AAEA,gC;AACA,oG;AACA,wC;AACA,W;AACA,K;;AAEA,2G;AACA,8B;AACA,2D;AACA,K;;AAEA,mD;AACA,iD;AACA,uB;AACA,uB;;AAEA,wB;AACA,c;AACA,yB;;AAEA,qC;AACA,4C;AACA,sC;AACA,mB;AACA,S;;AAEA,gD;AACA,6B;AACA,gD;AACA,mD;AACA,yC;AACA,oD;;AAEA,uC;AACA,yB;AACA,a;;AAEA,sF;AACA,yD;;AAEA,uB;AACA,oE;;AAEA,gD;;AAEA,oE;AACA,2C;AACA,wC;AACA,a;AACA,S;;AAEA,iD;AACA,K;;AAEA,2B;AACA,+B;AACA,iB;AACA,+B;AACA,0C;;AAEA,oB;AACA,kC;AACA,0D;AACA,kD;AACA,0D;AACA,mE;AACA,0B;AACA,iB;AACA,a;AACA,0D;AACA,kD;AACA,gD;AACA,0B;AACA,iB;AACA,a;AACA,mD;AACA,iC;AACA,a;AACA,gD;AACA,gB;AACA,oC;AACA,S;AACA,K;;AAEA,uC;AACA,yC;AACA,yB;AACA,wC;AACA,mC;AACA,mD;AACA,S;AACA,K;;AAEA,wC;AACA,uC;AACA,kC;AACA,mC;AACA,mC;AACA,yC;AACA,sE;AACA,8C;AACA,+C;AACA,uC;AACA,oC;AACA,uC;AACA,mC;AACA,gD;AACA,mC;AACA,gD;AACA,gC;AACA,wC;AACA,gB;AACA,mD;AACA,S;AACA,K;;AAEA,6C;AACA,8C;AACA,4H;AACA,kD;;AAEA,0D;AACA,uB;AACA,gC;AACA,S;AACA,oB;AACA,K;;AAEA,6B;AACA,6D;AACA,uB;AACA,mC;AACA,S;AACA,oB;AACA,K;;AAEA,0C;AACA,wC;AACA,gC;AACA,4C;AACA,a;AACA,kB;AACA,oD;AACA,gD;AACA,gC;AACA,iB;AACA,a;AACA,S;AACA,qB;AACA,K;;AAEA,yC;AACA,qB;AACA,yC;;;AAGA,6F;AACA,iF;AACA,mF;AACA,K;;AAEA,kE;AACA,6D;AACA,8C;AACA,8C;AACA,4C;AACA,2C;AACA,6C;AACA,4C;;AAEA,0E;AACA,yC;AACA,wE;AACA,uC;AACA,oE;AACA,sC;AACA,kE;AACA,wC;AACA,sE;AACA,sD;;AAEA,gC;AACA,sC;AACA,yB;AACA,iD;AACA,K;;;AAGA,yC;AACA,oB;AACA,yC;;;AAGA,4C;AACA,oE;AACA,sD;AACA,4C;AACA,8E;AACA,mD;AACA,4D;AACA,oE;AACA,wD;AACA,+D;AACA,2B;;;AAGA,oC;AACA,iC;AACA,S;;AAEA,wC;AACA,iC;AACA,S;;AAEA,+D;AACA,gB;AACA,4D;AACA,uC;AACA,U;AACA,K;;AAEA,6G;AACA,4F;AACA,0E;;AAEA,4B;AACA,6D;AACA,2G;AACA,gF;;AAEA,gB;AACA,kD;AACA,oF;AACA,U;AACA,K;;AAEA,yC;AACA,2B;AACA,yC;;AAEA,iC;AACA,8B;AACA,+B;;AAEA,wE;;AAEA,uE;AACA,qD;AACA,S;;AAEA,wC;AACA,+D;AACA,S;;AAEA,qC;AACA,2C;AACA,4B;AACA,kC;AACA,mD;AACA,oB;AACA,oD;AACA,a;AACA,gB;AACA,sC;AACA,S;;AAEA,kC;AACA,K;;AAEA,uD;AACA,c;;AAEA,2C;AACA,4B;AACA,+B;AACA,S;AACA,qD;AACA,uD;AACA,e;AACA,kC;AACA,qB;AACA,sB;AACA,sB;AACA,2B;AACA,yB;AACA,sC;;AAEA,6B;AACA,M;;AAEA,+C;;AAEA,+C;AACA,+D;AACA,8D;AACA,qC;AACA,sE;AACA,2B;AACA,4C;AACA,S;AACA,M;;AAEA,wE;AACA,8D;AACA,M;AACA,6E;AACA,mD;AACA,kC;AACA,mB;AACA,0D;AACA,iC;AACA,S;AACA,8B;AACA,4B;AACA,S;AACA,yB;AACA,8C;AACA,sC;AACA,iC;AACA,a;AACA,S;AACA,mB;AACA,K;;AAEA,8B;AACA,+C;;AAEA,wC;AACA,M;;AAEA,8B;AACA,+C;;AAEA,uC;AACA,M;;AAEA,wB;AACA,2D;AACA,c;;AAEA,2C;AACA,4B;AACA,+B;AACA,S;AACA,qD;AACA,uD;AACA,e;AACA,kC;AACA,yB;AACA,wB;AACA,sB;AACA,qB;AACA,sB;AACA,2B;AACA,sC;;AAEA,mC;AACA,M;;AAEA,gD;AACA,oC;AACA,oC;AACA,M;;AAEA,e;AACA,6C;AACA,6B;AACA,oE;AACA,yB;AACA,iB;AACA,gB;AACA,qB;AACA,oB;;AAEA,uC;AACA,wB;AACA,wC;AACA,+B;AACA,gC;AACA,c;AACA,+C;AACA,0B;AACA,sB;AACA,sC;AACA,oB;AACA,8C;AACA,a;AACA,qE;AACA,+C;AACA,wB;AACA,qB;AACA,6C;AACA,6C;AACA,+C;AACA,+C;AACA,oD;AACA,c;AACA,8D;AACA,+C;AACA,uC;AACA,8E;AACA,2C;AACA,0E;AACA,mE;AACA,+C;AACA,qD;AACA,c;AACA,wB;AACA,sC;AACA,sC;AACA,sC;AACA,sC;AACA,sC;AACA,sC;AACA,qC;AACA,c;AACA,kD;AACA,2D;AACA,oF;;AAEA,0B;AACA,+C;AACA,wC;AACA,S;;AAEA,qC;;AAEA,0E;AACA,wC;AACA,S;;AAEA,mB;AACA,M;;AAEA,qB;AACA,6B;;AAEA,qB;AACA,qC;;AAEA,+C;AACA,qC;;AAEA,6E;AACA,0C;AACA,+C;;AAEA,iE;AACA,mE;AACA,yC;;AAEA,4E;AACA,gE;AACA,8D;AACA,yB;AACA,S;AACA,kC;AACA,qD;AACA,S;AACA,kD;AACA,oB;AACA,M;;AAEA,4B;AACA,gE;AACA,+B;AACA,6C;AACA,S;AACA,M;;AAEA,yE;AACA,2E;AACA,kB;AACA,4C;AACA,iB;AACA,kB;AACA,iD;AACA,wD;AACA,a;AACA,kB;AACA,8C;AACA,a;;AAEA,uB;AACA,gE;AACA,a;AACA,S;;AAEA,oC;AACA,M;;AAEA,mD;AACA,8B;AACA,+B;AACA,iC;AACA,6C;AACA,a;AACA,sC;;AAEA,4D;AACA,gC;;AAEA,iC;AACA,gB;AACA,iC;AACA,iC;AACA,wB;AACA,S;AACA,M;;AAEA,gC;AACA,wE;AACA,wB;AACA,0C;AACA,S;AACA,M;;AAEA,0B;AACA,wC;AACA,mB;;AAEA,sD;AACA,oC;AACA,S;;AAEA,mB;AACA,kC;AACA,S;;AAEA,4B;AACA,2C;AACA,qC;AACA,yB;AACA,8B;AACA,a;AACA,wB;AACA,S;;AAEA,iC;AACA,M;;AAEA,4B;AACA,sC;AACA,uC;AACA,qE;AACA,M;;AAEA,wC;AACA,wC;AACA,uC;AACA,M;;AAEA,6C;AACA,2B;AACA,K;;AAEA,8C;AACA,qC;AACA,M;;AAEA,uC;AACA,gC;AACA,4B;AACA,iC;AACA,S;AACA,c;AACA,yC;AACA,S;;AAEA,iB;AACA,M;;AAEA,oC;AACA,yD;AACA,M;;AAEA,iD;AACA,gE;AACA,M;;AAEA,yC;AACA,wB;AACA,yC;;;AAGA,0C;;AAEA,6B;AACA,gC;AACA,U;;AAEA,+B;AACA,4D;AACA,U;;AAEA,4B;AACA,4C;AACA,U;;AAEA,gC;AACA,wF;AACA,U;;AAEA,8B;AACA,4D;AACA,U;;AAEA,mC;AACA,uC;AACA,mD;AACA,uE;AACA,oB;AACA,yE;AACA,a;AACA,U;;AAEA,+B;AACA,yB;AACA,oB;AACA,yB;AACA,0B;AACA,yB;AACA,0B;AACA,4B;AACA,4B;AACA,gC;AACA,c;AACA,U;;AAEA,+B;AACA,iC;AACA,U;;AAEA,oC;AACA,0B;AACA,qI;AACA,a;;AAEA,yB;AACA,U;;AAEA,oC;AACA,wC;AACA,U;;AAEA,gC;AACA,qC;AACA,U;;AAEA,wC;AACA,+C;AACA,U;;AAEA,0C;AACA,8B;AACA,4C;AACA,oC;;AAEA,oC;AACA,+D;AACA,iB;AACA,a;AACA,wB;AACA,U;;AAEA,yC;AACA,iF;AACA,wD;AACA,U;;AAEA,oC;;AAEA,+C;;AAEA,iD;AACA,2C;AACA,6D;AACA,6B;;AAEA,0C;;AAEA,wD;AACA,0E;AACA,oG;AACA,uC;AACA,4F;AACA,8E;AACA,+C;AACA,mE;AACA,uE;AACA,kE;AACA,iF;AACA,2F;AACA,uC;AACA,yC;AACA,iB;AACA,oB;AACA,qC;AACA,kE;AACA,kE;AACA,sE;AACA,oG;AACA,0G;AACA,yB;AACA,a;AACA,uD;AACA,U;;AAEA,+C;AACA,0G;AACA,U;;AAEA,4C;AACA,sD;AACA,U;;AAEA,oC;AACA,8D;AACA,6E;AACA,uC;AACA,uD;AACA,oD;AACA,iD;AACA,4C;AACA,0C;AACA,0C;AACA,0C;AACA,uD;AACA,yE;AACA,U;;AAEA,kC;AACA,2C;AACA,U;;AAEA,6B;AACA,iE;AACA,4D;AACA,U;;AAEA,gC;AACA,2E;AACA,gC;AACA,+D;AACA,kD;AACA,oB;AACA,2B;AACA,a;AACA,U;;AAEA,4C;;AAEA,oC;AACA,0C;AACA,sE;AACA,oD;AACA,4B;AACA,wB;AACA,8B;AACA,mC;AACA,2B;AACA,yB;AACA,6B;AACA,mC;AACA,wB;AACA,2B;AACA,uB;AACA,8B;AACA,mC;AACA,wB;AACA,gC;AACA,mC;AACA,0B;AACA,gC;AACA,mC;AACA,0B;AACA,qC;AACA,mC;AACA,a;;AAEA,uC;AACA,mC;AACA,gC;AACA,6C;AACA,mC;AACA,a;;AAEA,wC;AACA,sC;AACA,6D;AACA,a;;AAEA,wB;AACA,U;;AAEA,iC;AACA,0C;AACA,wG;AACA,U;;AAEA,0C;AACA,yE;AACA,gF;AACA,U;;AAEA,2C;AACA,yE;AACA,gF;AACA,U;;AAEA,yC;AACA,kC;AACA,wF;AACA,U;;AAEA,uB;AACA,oH;AACA,mC;AACA,2D;AACA,wD;AACA,kB;AACA,W;;AAEA,uB;AACA,mH;AACA,kC;AACA,0D;AACA,uD;AACA,iB;AACA,U;;AAEA,uE;AACA,0E;AACA,2E;AACA,+D;AACA,U;AACA,8D;AACA,6E;AACA,wE;AACA,0E;AACA,uD;AACA,gD;AACA,2C;AACA,4B;AACA,gC;AACA,gD;AACA,6D;AACA,iB;AACA,2C;AACA,uC;AACA,iB;AACA,oD;AACA,8D;AACA,iB;AACA,qC;AACA,mC;AACA,0C;AACA,oD;AACA,iB;AACA,uC;AACA,mE;AACA,6D;AACA,gF;AACA,yD;AACA,sD;AACA,wD;AACA,sD;AACA,qB;AACA,iB;AACA,oB;AACA,0E;AACA,a;AACA,wB;AACA,U;;AAEA,gC;AACA,4C;AACA,U;;AAEA,gC;AACA,mE;AACA,U;;AAEA,iC;AACA,4B;AACA,qC;AACA,qD;AACA,mC;AACA,a;AACA,wB;AACA,U;;AAEA,iD;AACA,yB;AACA,0B;AACA,a;AACA,kB;AACA,6C;AACA,a;;AAEA,oD;AACA,U;;AAEA,mC;AACA,0D;AACA,U;;AAEA,sC;AACA,4G;AACA,kF;AACA,U;;AAEA,oC;AACA,sH;AACA,U;;AAEA,qC;AACA,uG;AACA,wE;AACA,U;;AAEA,wC;AACA,mD;AACA,wE;AACA,U;;AAEA,iC;AACA,oD;AACA,4E;AACA,U;;AAEA,oC;AACA,mD;AACA,4E;AACA,U;;AAEA,oC;AACA,6E;AACA,4E;AACA,U;;AAEA,uC;AACA,oD;AACA,6E;AACA,sE;AACA,kG;AACA,U;;AAEA,sC;AACA,kD;AACA,U;;AAEA,mC;AACA,mD;AACA,wE;AACA,U;;AAEA,gC;AACA,0C;AACA,iC;AACA,U;;AAEA,uC;AACA,0C;AACA,oD;AACA,mC;AACA,a;AACA,wB;AACA,U;;AAEA,kE;AACA,wE;AACA,uC;AACA,iC;AACA,oC;AACA,0C;AACA,oB;AACA,sD;AACA,4B;AACA,a;AACA,U;;AAEA,yB;AACA,gF;AACA,4B;AACA,wC;AACA,6C;AACA,wB;AACA,0D;AACA,gC;AACA,iB;AACA,a;AACA,U;;AAEA,kC;AACA,gC;AACA,S;AACA,O;;AAEA,yC;AACA,uB;;AAEA,uC;AACA,wC;AACA,wD;AACA,4C;AACA,4C;AACA,2B;AACA,a;AACA,S;;AAEA,yC;AACA,gD;AACA,+E;AACA,mB;AACA,K;;AAEA,mC;AACA,kE;AACA,K;;AAEA,0C;AACA,+B;AACA,8C;AACA,gB;AACA,2E;AACA,S;AACA,K;;AAEA,2C;AACA,iC;AACA,gC;AACA,6C;AACA,oD;AACA,4B;AACA,oB;AACA,6C;AACA,a;AACA,U;AACA,K;;AAEA,yF;AACA,0E;AACA,0E;AACA,yE;AACA,6E;AACA,4E;AACA,iB;AACA,mE;AACA,4C;AACA,gD;AACA,+G;AACA,oD;AACA,mH;;AAEA,yB;AACA,mC;AACA,uC;AACA,qC;AACA,2C;AACA,2C;;AAEA,iC;AACA,6C;;AAEA,yC;AACA,0B;AACA,yC;;;AAGA,iC;AACA,2E;AACA,mC;AACA,K;;AAEA,kC;AACA,8C;AACA,6D;AACA,oC;AACA,K;;AAEA,qD;;AAEA,+B;AACA,kD;AACA,kC;AACA,sC;AACA,kC;AACA,mD;;AAEA,sE;AACA,2C;AACA,oD;;AAEA,oD;AACA,wC;;AAEA,6C;AACA,wC;;AAEA,2C;AACA,oC;;AAEA,yC;;AAEA,0E;AACA,gD;AACA,iD;;AAEA,iC;AACA,6E;AACA,0C;AACA,uB;;AAEA,kC;AACA,2C;AACA,yB;;AAEA,6B;AACA,iC;AACA,+B;AACA,U;;AAEA,2B;AACA,8D;AACA,8C;AACA,kD;;AAEA,wE;AACA,8D;AACA,8D;AACA,0D;AACA,4D;AACA,0D;;AAEA,wB;AACA,U;;AAEA,6B;AACA,6C;AACA,U;;AAEA,+B;AACA,uC;AACA,kC;AACA,4C;AACA,iD;AACA,U;;AAEA,0C;AACA,4E;;AAEA,6B;AACA,qE;AACA,a;;AAEA,wD;AACA,U;;AAEA,qC;AACA,iE;AACA,kD;;AAEA,oD;AACA,oC;AACA,wC;;AAEA,2B;;AAEA,wB;AACA,U;;AAEA,0C;AACA,kD;;AAEA,oD;AACA,oC;AACA,wC;;AAEA,2B;;AAEA,wB;AACA,U;;AAEA,gC;AACA,0C;AACA,qD;AACA,U;;AAEA,+B;AACA,6B;AACA,0C;;AAEA,2D;AACA,wD;AACA,+D;AACA,gE;AACA,oB;AACA,uD;AACA,gC;AACA,iD;AACA,4C;AACA,kD;AACA,yD;AACA,8D;AACA,0E;AACA,sE;AACA,iB;AACA,a;AACA,U;;AAEA,8B;AACA,kC;;AAEA,gC;AACA,8E;AACA,oC;AACA,yB;AACA,0C;AACA,a;AACA,U;;AAEA,mC;AACA,2G;AACA,+C;AACA,iD;AACA,6C;AACA,+C;AACA,mD;AACA,gF;;AAEA,oC;AACA,0E;AACA,+C;AACA,6B;AACA,a;;AAEA,sD;AACA,qB;AACA,4C;AACA,8C;AACA,0C;AACA,4D;AACA,4C;AACA,gD;AACA,+C;AACA,U;;AAEA,kC;AACA,gC;AACA,S;AACA,O;;AAEA,uC;AACA,gD;AACA,oC;AACA,U;AACA,K;;AAEA,uC;AACA,uD;AACA,gD;AACA,S;AACA,K;;AAEA,qD;AACA,6B;AACA,M;AACA,gD;AACA,4B;AACA,M;AACA,gD;AACA,4B;AACA,M;AACA,8C;AACA,4B;AACA,M;AACA,6C;AACA,4B;AACA,M;AACA,8C;AACA,gC;AACA,M;AACA,+C;AACA,4B;AACA,M;AACA,8C;AACA,4B;AACA,M;;AAEA,yC;AACA,sB;AACA,yC;;;AAGA,kE;AACA,yB;AACA,qC;AACA,gC;AACA,kE;AACA,kC;AACA,kC;AACA,wC;AACA,mC;AACA,S;AACA,O;;AAEA,uB;;AAEA,yC;AACA,uB;AACA,yC;;AAEA,0C;AACA,+B;AACA,2C;AACA,mB;AACA,S;AACA,6C;AACA,8B;AACA,2C;AACA,qE;AACA,uE;AACA,+B;AACA,4B;AACA,gB;AACA,wC;AACA,S;AACA,K;;AAEA,iC;AACA,oB;AACA,gC;AACA,4D;AACA,8D;AACA,wF;AACA,8C;AACA,qD;AACA,a;;AAEA,0B;AACA,W;AACA,yB;AACA,Y;AACA,qB;AACA,K;AACA,c;;;;;;;;;;;;;;;;;;;ACvvFA,+E;AACA,qC;AACA,uB;AACA,C","sourcesContent":["//! moment.js\n//! version : 2.8.1\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n//! license : MIT\n//! momentjs.com\n\n(function (undefined) {\n    /************************************\n        Constants\n    ************************************/\n\n    var moment,\n        VERSION = '2.8.1',\n        // the global-scope this is NOT the global object in Node.js\n        globalScope = typeof global !== 'undefined' ? global : this,\n        oldGlobalMoment,\n        round = Math.round,\n        i,\n\n        YEAR = 0,\n        MONTH = 1,\n        DATE = 2,\n        HOUR = 3,\n        MINUTE = 4,\n        SECOND = 5,\n        MILLISECOND = 6,\n\n        // internal storage for locale config files\n        locales = {},\n\n        // extra moment internal properties (plugins register props here)\n        momentProperties = [],\n\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports),\n\n        // ASP.NET json date format regex\n        aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i,\n        aspNetTimeSpanJsonRegex = /(\\-)?(?:(\\d*)\\.)?(\\d+)\\:(\\d+)(?:\\:(\\d+)\\.?(\\d{3})?)?/,\n\n        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,\n\n        // format tokens\n        formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LT|LL?L?L?|l{1,4})/g,\n\n        // parsing token regexes\n        parseTokenOneOrTwoDigits = /\\d\\d?/, // 0 - 99\n        parseTokenOneToThreeDigits = /\\d{1,3}/, // 0 - 999\n        parseTokenOneToFourDigits = /\\d{1,4}/, // 0 - 9999\n        parseTokenOneToSixDigits = /[+\\-]?\\d{1,6}/, // -999,999 - 999,999\n        parseTokenDigits = /\\d+/, // nonzero number of digits\n        parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/gi, // +00:00 -00:00 +0000 -0000 or Z\n        parseTokenT = /T/i, // T (ISO separator)\n        parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/, // 123456789 123456789.123\n        parseTokenOrdinal = /\\d{1,2}/,\n\n        //strict parsing regexes\n        parseTokenOneDigit = /\\d/, // 0 - 9\n        parseTokenTwoDigits = /\\d\\d/, // 00 - 99\n        parseTokenThreeDigits = /\\d{3}/, // 000 - 999\n        parseTokenFourDigits = /\\d{4}/, // 0000 - 9999\n        parseTokenSixDigits = /[+-]?\\d{6}/, // -999,999 - 999,999\n        parseTokenSignedNumber = /[+-]?\\d+/, // -inf - inf\n\n        // iso 8601 regex\n        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n        isoRegex = /^\\s*(?:[+-]\\d{6}|\\d{4})-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/,\n\n        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',\n\n        isoDates = [\n            ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d{2}-\\d{2}/],\n            ['YYYY-MM-DD', /\\d{4}-\\d{2}-\\d{2}/],\n            ['GGGG-[W]WW-E', /\\d{4}-W\\d{2}-\\d/],\n            ['GGGG-[W]WW', /\\d{4}-W\\d{2}/],\n            ['YYYY-DDD', /\\d{4}-\\d{3}/]\n        ],\n\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.SSSS', /(T| )\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n            ['HH:mm:ss', /(T| )\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /(T| )\\d\\d:\\d\\d/],\n            ['HH', /(T| )\\d\\d/]\n        ],\n\n        // timezone chunker \"+10:00\" > [\"10\", \"00\"] or \"-1530\" > [\"-15\", \"30\"]\n        parseTimezoneChunker = /([\\+\\-]|\\d\\d)/gi,\n\n        // getter and setter names\n        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),\n        unitMillisecondFactors = {\n            'Milliseconds' : 1,\n            'Seconds' : 1e3,\n            'Minutes' : 6e4,\n            'Hours' : 36e5,\n            'Days' : 864e5,\n            'Months' : 2592e6,\n            'Years' : 31536e6\n        },\n\n        unitAliases = {\n            ms : 'millisecond',\n            s : 'second',\n            m : 'minute',\n            h : 'hour',\n            d : 'day',\n            D : 'date',\n            w : 'week',\n            W : 'isoWeek',\n            M : 'month',\n            Q : 'quarter',\n            y : 'year',\n            DDD : 'dayOfYear',\n            e : 'weekday',\n            E : 'isoWeekday',\n            gg: 'weekYear',\n            GG: 'isoWeekYear'\n        },\n\n        camelFunctions = {\n            dayofyear : 'dayOfYear',\n            isoweekday : 'isoWeekday',\n            isoweek : 'isoWeek',\n            weekyear : 'weekYear',\n            isoweekyear : 'isoWeekYear'\n        },\n\n        // format function strings\n        formatFunctions = {},\n\n        // default relative time thresholds\n        relativeTimeThresholds = {\n            s: 45,  // seconds to minute\n            m: 45,  // minutes to hour\n            h: 22,  // hours to day\n            d: 26,  // days to month\n            M: 11   // months to year\n        },\n\n        // tokens to ordinalize and pad\n        ordinalizeTokens = 'DDD w W M D d'.split(' '),\n        paddedTokens = 'M D H h m s w W'.split(' '),\n\n        formatTokenFunctions = {\n            M    : function () {\n                return this.month() + 1;\n            },\n            MMM  : function (format) {\n                return this.localeData().monthsShort(this, format);\n            },\n            MMMM : function (format) {\n                return this.localeData().months(this, format);\n            },\n            D    : function () {\n                return this.date();\n            },\n            DDD  : function () {\n                return this.dayOfYear();\n            },\n            d    : function () {\n                return this.day();\n            },\n            dd   : function (format) {\n                return this.localeData().weekdaysMin(this, format);\n            },\n            ddd  : function (format) {\n                return this.localeData().weekdaysShort(this, format);\n            },\n            dddd : function (format) {\n                return this.localeData().weekdays(this, format);\n            },\n            w    : function () {\n                return this.week();\n            },\n            W    : function () {\n                return this.isoWeek();\n            },\n            YY   : function () {\n                return leftZeroFill(this.year() % 100, 2);\n            },\n            YYYY : function () {\n                return leftZeroFill(this.year(), 4);\n            },\n            YYYYY : function () {\n                return leftZeroFill(this.year(), 5);\n            },\n            YYYYYY : function () {\n                var y = this.year(), sign = y >= 0 ? '+' : '-';\n                return sign + leftZeroFill(Math.abs(y), 6);\n            },\n            gg   : function () {\n                return leftZeroFill(this.weekYear() % 100, 2);\n            },\n            gggg : function () {\n                return leftZeroFill(this.weekYear(), 4);\n            },\n            ggggg : function () {\n                return leftZeroFill(this.weekYear(), 5);\n            },\n            GG   : function () {\n                return leftZeroFill(this.isoWeekYear() % 100, 2);\n            },\n            GGGG : function () {\n                return leftZeroFill(this.isoWeekYear(), 4);\n            },\n            GGGGG : function () {\n                return leftZeroFill(this.isoWeekYear(), 5);\n            },\n            e : function () {\n                return this.weekday();\n            },\n            E : function () {\n                return this.isoWeekday();\n            },\n            a    : function () {\n                return this.localeData().meridiem(this.hours(), this.minutes(), true);\n            },\n            A    : function () {\n                return this.localeData().meridiem(this.hours(), this.minutes(), false);\n            },\n            H    : function () {\n                return this.hours();\n            },\n            h    : function () {\n                return this.hours() % 12 || 12;\n            },\n            m    : function () {\n                return this.minutes();\n            },\n            s    : function () {\n                return this.seconds();\n            },\n            S    : function () {\n                return toInt(this.milliseconds() / 100);\n            },\n            SS   : function () {\n                return leftZeroFill(toInt(this.milliseconds() / 10), 2);\n            },\n            SSS  : function () {\n                return leftZeroFill(this.milliseconds(), 3);\n            },\n            SSSS : function () {\n                return leftZeroFill(this.milliseconds(), 3);\n            },\n            Z    : function () {\n                var a = -this.zone(),\n                    b = '+';\n                if (a < 0) {\n                    a = -a;\n                    b = '-';\n                }\n                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);\n            },\n            ZZ   : function () {\n                var a = -this.zone(),\n                    b = '+';\n                if (a < 0) {\n                    a = -a;\n                    b = '-';\n                }\n                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);\n            },\n            z : function () {\n                return this.zoneAbbr();\n            },\n            zz : function () {\n                return this.zoneName();\n            },\n            X    : function () {\n                return this.unix();\n            },\n            Q : function () {\n                return this.quarter();\n            }\n        },\n\n        deprecations = {},\n\n        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];\n\n    // Pick the first defined of two or three arguments. dfl comes from\n    // default.\n    function dfl(a, b, c) {\n        switch (arguments.length) {\n            case 2: return a != null ? a : b;\n            case 3: return a != null ? a : b != null ? b : c;\n            default: throw new Error('Implement me');\n        }\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object, and es5 standard is not very\n        // helpful.\n        return {\n            empty : false,\n            unusedTokens : [],\n            unusedInput : [],\n            overflow : -2,\n            charsLeftOver : 0,\n            nullInput : false,\n            invalidMonth : null,\n            invalidFormat : false,\n            userInvalidated : false,\n            iso: false\n        };\n    }\n\n    function printMsg(msg) {\n        if (moment.suppressDeprecationWarnings === false &&\n                typeof console !== 'undefined' && console.warn) {\n            console.warn(\"Deprecation warning: \" + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n        return extend(function () {\n            if (firstTime) {\n                printMsg(msg);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    function deprecateSimple(name, msg) {\n        if (!deprecations[name]) {\n            printMsg(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    function padToken(func, count) {\n        return function (a) {\n            return leftZeroFill(func.call(this, a), count);\n        };\n    }\n    function ordinalizeToken(func, period) {\n        return function (a) {\n            return this.localeData().ordinal(func.call(this, a), period);\n        };\n    }\n\n    while (ordinalizeTokens.length) {\n        i = ordinalizeTokens.pop();\n        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);\n    }\n    while (paddedTokens.length) {\n        i = paddedTokens.pop();\n        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);\n    }\n    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    function Locale() {\n    }\n\n    // Moment prototype object\n    function Moment(config, skipOverflow) {\n        if (skipOverflow !== false) {\n            checkOverflow(config);\n        }\n        copyConfig(this, config);\n        this._d = new Date(+config._d);\n    }\n\n    // Duration Constructor\n    function Duration(duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 36e5; // 1000 * 60 * 60\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = moment.localeData();\n\n        this._bubble();\n    }\n\n    /************************************\n        Helpers\n    ************************************/\n\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (b.hasOwnProperty(i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (b.hasOwnProperty('toString')) {\n            a.toString = b.toString;\n        }\n\n        if (b.hasOwnProperty('valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (typeof from._isAMomentObject !== 'undefined') {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (typeof from._i !== 'undefined') {\n            to._i = from._i;\n        }\n        if (typeof from._f !== 'undefined') {\n            to._f = from._f;\n        }\n        if (typeof from._l !== 'undefined') {\n            to._l = from._l;\n        }\n        if (typeof from._strict !== 'undefined') {\n            to._strict = from._strict;\n        }\n        if (typeof from._tzm !== 'undefined') {\n            to._tzm = from._tzm;\n        }\n        if (typeof from._isUTC !== 'undefined') {\n            to._isUTC = from._isUTC;\n        }\n        if (typeof from._offset !== 'undefined') {\n            to._offset = from._offset;\n        }\n        if (typeof from._pf !== 'undefined') {\n            to._pf = from._pf;\n        }\n        if (typeof from._locale !== 'undefined') {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i in momentProperties) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (typeof val !== 'undefined') {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.ceil(number);\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    // left zero fill a number\n    // see http://jsperf.com/left-zero-filling for performance comparison\n    function leftZeroFill(number, targetLength, forceSign) {\n        var output = '' + Math.abs(number),\n            sign = number >= 0;\n\n        while (output.length < targetLength) {\n            output = '0' + output;\n        }\n        return (sign ? (forceSign ? '+' : '') : '-') + output;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {milliseconds: 0, months: 0};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        other = makeAs(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, \"moment().\" + name  + \"(period, number) is deprecated. Please use moment().\" + name + \"(number, period).\");\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = moment.duration(val, period);\n            addOrSubtractDurationFromMoment(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = duration._days,\n            months = duration._months;\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (milliseconds) {\n            mom._d.setTime(+mom._d + milliseconds * isAdding);\n        }\n        if (days) {\n            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);\n        }\n        if (months) {\n            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);\n        }\n        if (updateOffset) {\n            moment.updateOffset(mom, days || months);\n        }\n    }\n\n    // check if is an array\n    function isArray(input) {\n        return Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isDate(input) {\n        return Object.prototype.toString.call(input) === '[object Date]' ||\n            input instanceof Date;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function normalizeUnits(units) {\n        if (units) {\n            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');\n            units = unitAliases[units] || camelFunctions[lowered] || lowered;\n        }\n        return units;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (inputObject.hasOwnProperty(prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    function makeList(field) {\n        var count, setter;\n\n        if (field.indexOf('week') === 0) {\n            count = 7;\n            setter = 'day';\n        }\n        else if (field.indexOf('month') === 0) {\n            count = 12;\n            setter = 'month';\n        }\n        else {\n            return;\n        }\n\n        moment[field] = function (format, index) {\n            var i, getter,\n                method = moment._locale[field],\n                results = [];\n\n            if (typeof format === 'number') {\n                index = format;\n                format = undefined;\n            }\n\n            getter = function (i) {\n                var m = moment().utc().set(setter, i);\n                return method.call(moment._locale, m, format || '');\n            };\n\n            if (index != null) {\n                return getter(index);\n            }\n            else {\n                for (i = 0; i < count; i++) {\n                    results.push(getter(i));\n                }\n                return results;\n            }\n        };\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            if (coercedNumber >= 0) {\n                value = Math.floor(coercedNumber);\n            } else {\n                value = Math.ceil(coercedNumber);\n            }\n        }\n\n        return value;\n    }\n\n    function daysInMonth(year, month) {\n        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();\n    }\n\n    function weeksInYear(year, dow, doy) {\n        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;\n    }\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    function checkOverflow(m) {\n        var overflow;\n        if (m._a && m._pf.overflow === -2) {\n            overflow =\n                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :\n                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :\n                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :\n                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :\n                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :\n                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n\n            m._pf.overflow = overflow;\n        }\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            m._isValid = !isNaN(m._d.getTime()) &&\n                m._pf.overflow < 0 &&\n                !m._pf.empty &&\n                !m._pf.invalidMonth &&\n                !m._pf.nullInput &&\n                !m._pf.invalidFormat &&\n                !m._pf.userInvalidated;\n\n            if (m._strict) {\n                m._isValid = m._isValid &&\n                    m._pf.charsLeftOver === 0 &&\n                    m._pf.unusedTokens.length === 0;\n            }\n        }\n        return m._isValid;\n    }\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return null;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        if (!locales[name] && hasModule) {\n            try {\n                oldLocale = moment.locale();\n                require('./locale/' + name);\n                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales\n                moment.locale(oldLocale);\n            } catch (e) { }\n        }\n        return locales[name];\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function makeAs(input, model) {\n        return model._isUTC ? moment(input).zone(model._offset || 0) :\n            moment(input).local();\n    }\n\n    /************************************\n        Locale\n    ************************************/\n\n\n    extend(Locale.prototype, {\n\n        set : function (config) {\n            var prop, i;\n            for (i in config) {\n                prop = config[i];\n                if (typeof prop === 'function') {\n                    this[i] = prop;\n                } else {\n                    this['_' + i] = prop;\n                }\n            }\n        },\n\n        _months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\n        months : function (m) {\n            return this._months[m.month()];\n        },\n\n        _monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n        monthsShort : function (m) {\n            return this._monthsShort[m.month()];\n        },\n\n        monthsParse : function (monthName) {\n            var i, mom, regex;\n\n            if (!this._monthsParse) {\n                this._monthsParse = [];\n            }\n\n            for (i = 0; i < 12; i++) {\n                // make the regex if we don't have it already\n                if (!this._monthsParse[i]) {\n                    mom = moment.utc([2000, i]);\n                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n                }\n                // test the regex\n                if (this._monthsParse[i].test(monthName)) {\n                    return i;\n                }\n            }\n        },\n\n        _weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n        weekdays : function (m) {\n            return this._weekdays[m.day()];\n        },\n\n        _weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n        weekdaysShort : function (m) {\n            return this._weekdaysShort[m.day()];\n        },\n\n        _weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n        weekdaysMin : function (m) {\n            return this._weekdaysMin[m.day()];\n        },\n\n        weekdaysParse : function (weekdayName) {\n            var i, mom, regex;\n\n            if (!this._weekdaysParse) {\n                this._weekdaysParse = [];\n            }\n\n            for (i = 0; i < 7; i++) {\n                // make the regex if we don't have it already\n                if (!this._weekdaysParse[i]) {\n                    mom = moment([2000, 1]).day(i);\n                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n                }\n                // test the regex\n                if (this._weekdaysParse[i].test(weekdayName)) {\n                    return i;\n                }\n            }\n        },\n\n        _longDateFormat : {\n            LT : 'h:mm A',\n            L : 'MM/DD/YYYY',\n            LL : 'MMMM D, YYYY',\n            LLL : 'MMMM D, YYYY LT',\n            LLLL : 'dddd, MMMM D, YYYY LT'\n        },\n        longDateFormat : function (key) {\n            var output = this._longDateFormat[key];\n            if (!output && this._longDateFormat[key.toUpperCase()]) {\n                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {\n                    return val.slice(1);\n                });\n                this._longDateFormat[key] = output;\n            }\n            return output;\n        },\n\n        isPM : function (input) {\n            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n            // Using charAt should be more compatible.\n            return ((input + '').toLowerCase().charAt(0) === 'p');\n        },\n\n        _meridiemParse : /[ap]\\.?m?\\.?/i,\n        meridiem : function (hours, minutes, isLower) {\n            if (hours > 11) {\n                return isLower ? 'pm' : 'PM';\n            } else {\n                return isLower ? 'am' : 'AM';\n            }\n        },\n\n        _calendar : {\n            sameDay : '[Today at] LT',\n            nextDay : '[Tomorrow at] LT',\n            nextWeek : 'dddd [at] LT',\n            lastDay : '[Yesterday at] LT',\n            lastWeek : '[Last] dddd [at] LT',\n            sameElse : 'L'\n        },\n        calendar : function (key, mom) {\n            var output = this._calendar[key];\n            return typeof output === 'function' ? output.apply(mom) : output;\n        },\n\n        _relativeTime : {\n            future : 'in %s',\n            past : '%s ago',\n            s : 'a few seconds',\n            m : 'a minute',\n            mm : '%d minutes',\n            h : 'an hour',\n            hh : '%d hours',\n            d : 'a day',\n            dd : '%d days',\n            M : 'a month',\n            MM : '%d months',\n            y : 'a year',\n            yy : '%d years'\n        },\n\n        relativeTime : function (number, withoutSuffix, string, isFuture) {\n            var output = this._relativeTime[string];\n            return (typeof output === 'function') ?\n                output(number, withoutSuffix, string, isFuture) :\n                output.replace(/%d/i, number);\n        },\n\n        pastFuture : function (diff, output) {\n            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);\n        },\n\n        ordinal : function (number) {\n            return this._ordinal.replace('%d', number);\n        },\n        _ordinal : '%d',\n\n        preparse : function (string) {\n            return string;\n        },\n\n        postformat : function (string) {\n            return string;\n        },\n\n        week : function (mom) {\n            return weekOfYear(mom, this._week.dow, this._week.doy).week;\n        },\n\n        _week : {\n            dow : 0, // Sunday is the first day of the week.\n            doy : 6  // The week that contains Jan 1st is the first week of the year.\n        },\n\n        _invalidDate: 'Invalid date',\n        invalidDate: function () {\n            return this._invalidDate;\n        }\n    });\n\n    /************************************\n        Formatting\n    ************************************/\n\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '';\n            for (i = 0; i < length; i++) {\n                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n\n        if (!formatFunctions[format]) {\n            formatFunctions[format] = makeFormatFunction(format);\n        }\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n\n    /************************************\n        Parsing\n    ************************************/\n\n\n    // get the regex to find the next token\n    function getParseRegexForToken(token, config) {\n        var a, strict = config._strict;\n        switch (token) {\n        case 'Q':\n            return parseTokenOneDigit;\n        case 'DDDD':\n            return parseTokenThreeDigits;\n        case 'YYYY':\n        case 'GGGG':\n        case 'gggg':\n            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;\n        case 'Y':\n        case 'G':\n        case 'g':\n            return parseTokenSignedNumber;\n        case 'YYYYYY':\n        case 'YYYYY':\n        case 'GGGGG':\n        case 'ggggg':\n            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;\n        case 'S':\n            if (strict) {\n                return parseTokenOneDigit;\n            }\n            /* falls through */\n        case 'SS':\n            if (strict) {\n                return parseTokenTwoDigits;\n            }\n            /* falls through */\n        case 'SSS':\n            if (strict) {\n                return parseTokenThreeDigits;\n            }\n            /* falls through */\n        case 'DDD':\n            return parseTokenOneToThreeDigits;\n        case 'MMM':\n        case 'MMMM':\n        case 'dd':\n        case 'ddd':\n        case 'dddd':\n            return parseTokenWord;\n        case 'a':\n        case 'A':\n            return config._locale._meridiemParse;\n        case 'X':\n            return parseTokenTimestampMs;\n        case 'Z':\n        case 'ZZ':\n            return parseTokenTimezone;\n        case 'T':\n            return parseTokenT;\n        case 'SSSS':\n            return parseTokenDigits;\n        case 'MM':\n        case 'DD':\n        case 'YY':\n        case 'GG':\n        case 'gg':\n        case 'HH':\n        case 'hh':\n        case 'mm':\n        case 'ss':\n        case 'ww':\n        case 'WW':\n            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;\n        case 'M':\n        case 'D':\n        case 'd':\n        case 'H':\n        case 'h':\n        case 'm':\n        case 's':\n        case 'w':\n        case 'W':\n        case 'e':\n        case 'E':\n            return parseTokenOneOrTwoDigits;\n        case 'Do':\n            return parseTokenOrdinal;\n        default :\n            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\\\', '')), 'i'));\n            return a;\n        }\n    }\n\n    function timezoneMinutesFromString(string) {\n        string = string || '';\n        var possibleTzMatches = (string.match(parseTokenTimezone) || []),\n            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],\n            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],\n            minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return parts[0] === '+' ? -minutes : minutes;\n    }\n\n    // function to convert string input to date\n    function addTimeToArrayFromToken(token, input, config) {\n        var a, datePartArray = config._a;\n\n        switch (token) {\n        // QUARTER\n        case 'Q':\n            if (input != null) {\n                datePartArray[MONTH] = (toInt(input) - 1) * 3;\n            }\n            break;\n        // MONTH\n        case 'M' : // fall through to MM\n        case 'MM' :\n            if (input != null) {\n                datePartArray[MONTH] = toInt(input) - 1;\n            }\n            break;\n        case 'MMM' : // fall through to MMMM\n        case 'MMMM' :\n            a = config._locale.monthsParse(input);\n            // if we didn't find a month name, mark the date as invalid.\n            if (a != null) {\n                datePartArray[MONTH] = a;\n            } else {\n                config._pf.invalidMonth = input;\n            }\n            break;\n        // DAY OF MONTH\n        case 'D' : // fall through to DD\n        case 'DD' :\n            if (input != null) {\n                datePartArray[DATE] = toInt(input);\n            }\n            break;\n        case 'Do' :\n            if (input != null) {\n                datePartArray[DATE] = toInt(parseInt(input, 10));\n            }\n            break;\n        // DAY OF YEAR\n        case 'DDD' : // fall through to DDDD\n        case 'DDDD' :\n            if (input != null) {\n                config._dayOfYear = toInt(input);\n            }\n\n            break;\n        // YEAR\n        case 'YY' :\n            datePartArray[YEAR] = moment.parseTwoDigitYear(input);\n            break;\n        case 'YYYY' :\n        case 'YYYYY' :\n        case 'YYYYYY' :\n            datePartArray[YEAR] = toInt(input);\n            break;\n        // AM / PM\n        case 'a' : // fall through to A\n        case 'A' :\n            config._isPm = config._locale.isPM(input);\n            break;\n        // 24 HOUR\n        case 'H' : // fall through to hh\n        case 'HH' : // fall through to hh\n        case 'h' : // fall through to hh\n        case 'hh' :\n            datePartArray[HOUR] = toInt(input);\n            break;\n        // MINUTE\n        case 'm' : // fall through to mm\n        case 'mm' :\n            datePartArray[MINUTE] = toInt(input);\n            break;\n        // SECOND\n        case 's' : // fall through to ss\n        case 'ss' :\n            datePartArray[SECOND] = toInt(input);\n            break;\n        // MILLISECOND\n        case 'S' :\n        case 'SS' :\n        case 'SSS' :\n        case 'SSSS' :\n            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);\n            break;\n        // UNIX TIMESTAMP WITH MS\n        case 'X':\n            config._d = new Date(parseFloat(input) * 1000);\n            break;\n        // TIMEZONE\n        case 'Z' : // fall through to ZZ\n        case 'ZZ' :\n            config._useUTC = true;\n            config._tzm = timezoneMinutesFromString(input);\n            break;\n        // WEEKDAY - human\n        case 'dd':\n        case 'ddd':\n        case 'dddd':\n            a = config._locale.weekdaysParse(input);\n            // if we didn't get a weekday name, mark the date as invalid\n            if (a != null) {\n                config._w = config._w || {};\n                config._w['d'] = a;\n            } else {\n                config._pf.invalidWeekday = input;\n            }\n            break;\n        // WEEK, WEEK DAY - numeric\n        case 'w':\n        case 'ww':\n        case 'W':\n        case 'WW':\n        case 'd':\n        case 'e':\n        case 'E':\n            token = token.substr(0, 1);\n            /* falls through */\n        case 'gggg':\n        case 'GGGG':\n        case 'GGGGG':\n            token = token.substr(0, 2);\n            if (input) {\n                config._w = config._w || {};\n                config._w[token] = toInt(input);\n            }\n            break;\n        case 'gg':\n        case 'GG':\n            config._w = config._w || {};\n            config._w[token] = moment.parseTwoDigitYear(input);\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);\n            week = dfl(w.W, 1);\n            weekday = dfl(w.E, 1);\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);\n            week = dfl(w.w, 1);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < dow) {\n                    ++week;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n            } else {\n                // default to begining of week\n                weekday = dow;\n            }\n        }\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);\n\n        config._a[YEAR] = temp.year;\n        config._dayOfYear = temp.dayOfYear;\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function dateFromConfig(config) {\n        var i, date, input = [], currentDate, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear) {\n            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse)) {\n                config._pf._overflowDayOfYear = true;\n            }\n\n            date = makeUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);\n        // Apply timezone offset from input. The actual zone can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);\n        }\n    }\n\n    function dateFromObject(config) {\n        var normalizedInput;\n\n        if (config._d) {\n            return;\n        }\n\n        normalizedInput = normalizeObjectUnits(config._i);\n        config._a = [\n            normalizedInput.year,\n            normalizedInput.month,\n            normalizedInput.day,\n            normalizedInput.hour,\n            normalizedInput.minute,\n            normalizedInput.second,\n            normalizedInput.millisecond\n        ];\n\n        dateFromConfig(config);\n    }\n\n    function currentDateArray(config) {\n        var now = new Date();\n        if (config._useUTC) {\n            return [\n                now.getUTCFullYear(),\n                now.getUTCMonth(),\n                now.getUTCDate()\n            ];\n        } else {\n            return [now.getFullYear(), now.getMonth(), now.getDate()];\n        }\n    }\n\n    // date from string and format string\n    function makeDateFromStringAndFormat(config) {\n        if (config._f === moment.ISO_8601) {\n            parseISO(config);\n            return;\n        }\n\n        config._a = [];\n        config._pf.empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    config._pf.unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    config._pf.empty = false;\n                }\n                else {\n                    config._pf.unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                config._pf.unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        config._pf.charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            config._pf.unusedInput.push(string);\n        }\n\n        // handle am pm\n        if (config._isPm && config._a[HOUR] < 12) {\n            config._a[HOUR] += 12;\n        }\n        // if is 12 am, change hours to 0\n        if (config._isPm === false && config._a[HOUR] === 12) {\n            config._a[HOUR] = 0;\n        }\n\n        dateFromConfig(config);\n        checkOverflow(config);\n    }\n\n    function unescapeFormat(s) {\n        return s.replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        });\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function regexpEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    // date from string and array of format strings\n    function makeDateFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            config._pf.invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            tempConfig._pf = defaultParsingFlags();\n            tempConfig._f = config._f[i];\n            makeDateFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += tempConfig._pf.charsLeftOver;\n\n            //or tokens\n            currentScore += tempConfig._pf.unusedTokens.length * 10;\n\n            tempConfig._pf.score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    // date from iso format\n    function parseISO(config) {\n        var i, l,\n            string = config._i,\n            match = isoRegex.exec(string);\n\n        if (match) {\n            config._pf.iso = true;\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(string)) {\n                    // match[5] should be \"T\" or undefined\n                    config._f = isoDates[i][0] + (match[6] || ' ');\n                    break;\n                }\n            }\n            for (i = 0, l = isoTimes.length; i < l; i++) {\n                if (isoTimes[i][1].exec(string)) {\n                    config._f += isoTimes[i][0];\n                    break;\n                }\n            }\n            if (string.match(parseTokenTimezone)) {\n                config._f += 'Z';\n            }\n            makeDateFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function makeDateFromString(config) {\n        parseISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n            moment.createFromInputFallback(config);\n        }\n    }\n\n    function makeDateFromInput(config) {\n        var input = config._i, matched;\n        if (input === undefined) {\n            config._d = new Date();\n        } else if (isDate(input)) {\n            config._d = new Date(+input);\n        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {\n            config._d = new Date(+matched[1]);\n        } else if (typeof input === 'string') {\n            makeDateFromString(config);\n        } else if (isArray(input)) {\n            config._a = input.slice(0);\n            dateFromConfig(config);\n        } else if (typeof(input) === 'object') {\n            dateFromObject(config);\n        } else if (typeof(input) === 'number') {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            moment.createFromInputFallback(config);\n        }\n    }\n\n    function makeDate(y, m, d, h, M, s, ms) {\n        //can't just apply() to create a date:\n        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply\n        var date = new Date(y, m, d, h, M, s, ms);\n\n        //the date constructor doesn't accept years < 1970\n        if (y < 1970) {\n            date.setFullYear(y);\n        }\n        return date;\n    }\n\n    function makeUTCDate(y) {\n        var date = new Date(Date.UTC.apply(null, arguments));\n        if (y < 1970) {\n            date.setUTCFullYear(y);\n        }\n        return date;\n    }\n\n    function parseWeekday(input, locale) {\n        if (typeof input === 'string') {\n            if (!isNaN(input)) {\n                input = parseInt(input, 10);\n            }\n            else {\n                input = locale.weekdaysParse(input);\n                if (typeof input !== 'number') {\n                    return null;\n                }\n            }\n        }\n        return input;\n    }\n\n    /************************************\n        Relative Time\n    ************************************/\n\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime(posNegDuration, withoutSuffix, locale) {\n        var duration = moment.duration(posNegDuration).abs(),\n            seconds = round(duration.as('s')),\n            minutes = round(duration.as('m')),\n            hours = round(duration.as('h')),\n            days = round(duration.as('d')),\n            months = round(duration.as('M')),\n            years = round(duration.as('y')),\n\n            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||\n                minutes === 1 && ['m'] ||\n                minutes < relativeTimeThresholds.m && ['mm', minutes] ||\n                hours === 1 && ['h'] ||\n                hours < relativeTimeThresholds.h && ['hh', hours] ||\n                days === 1 && ['d'] ||\n                days < relativeTimeThresholds.d && ['dd', days] ||\n                months === 1 && ['M'] ||\n                months < relativeTimeThresholds.M && ['MM', months] ||\n                years === 1 && ['y'] || ['yy', years];\n\n        args[2] = withoutSuffix;\n        args[3] = +posNegDuration > 0;\n        args[4] = locale;\n        return substituteTimeAgo.apply({}, args);\n    }\n\n\n    /************************************\n        Week of Year\n    ************************************/\n\n\n    // firstDayOfWeek       0 = sun, 6 = sat\n    //                      the day of the week that starts the week\n    //                      (usually sunday or monday)\n    // firstDayOfWeekOfYear 0 = sun, 6 = sat\n    //                      the first week is the week that contains the first\n    //                      of this day of the week\n    //                      (eg. ISO weeks use thursday (4))\n    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n        var end = firstDayOfWeekOfYear - firstDayOfWeek,\n            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),\n            adjustedMoment;\n\n\n        if (daysToDayOfWeek > end) {\n            daysToDayOfWeek -= 7;\n        }\n\n        if (daysToDayOfWeek < end - 7) {\n            daysToDayOfWeek += 7;\n        }\n\n        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');\n        return {\n            week: Math.ceil(adjustedMoment.dayOfYear() / 7),\n            year: adjustedMoment.year()\n        };\n    }\n\n    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {\n        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;\n\n        d = d === 0 ? 7 : d;\n        weekday = weekday != null ? weekday : firstDayOfWeek;\n        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);\n        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;\n\n        return {\n            year: dayOfYear > 0 ? year : year - 1,\n            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear\n        };\n    }\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    function makeMoment(config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || moment.localeData(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return moment.invalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (moment.isMoment(input)) {\n            return new Moment(input, true);\n        } else if (format) {\n            if (isArray(format)) {\n                makeDateFromStringAndArray(config);\n            } else {\n                makeDateFromStringAndFormat(config);\n            }\n        } else {\n            makeDateFromInput(config);\n        }\n\n        return new Moment(config);\n    }\n\n    moment = function (input, format, locale, strict) {\n        var c;\n\n        if (typeof(locale) === \"boolean\") {\n            strict = locale;\n            locale = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c = {};\n        c._isAMomentObject = true;\n        c._i = input;\n        c._f = format;\n        c._l = locale;\n        c._strict = strict;\n        c._isUTC = false;\n        c._pf = defaultParsingFlags();\n\n        return makeMoment(c);\n    };\n\n    moment.suppressDeprecationWarnings = false;\n\n    moment.createFromInputFallback = deprecate(\n        'moment construction falls back to js Date. This is ' +\n        'discouraged and will be removed in upcoming major ' +\n        'release. Please refer to ' +\n        'https://github.com/moment/moment/issues/1407 for more info.',\n        function (config) {\n            config._d = new Date(config._i);\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return moment();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    moment.min = function () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    };\n\n    moment.max = function () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    };\n\n    // creating with utc\n    moment.utc = function (input, format, locale, strict) {\n        var c;\n\n        if (typeof(locale) === \"boolean\") {\n            strict = locale;\n            locale = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c = {};\n        c._isAMomentObject = true;\n        c._useUTC = true;\n        c._isUTC = true;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n        c._pf = defaultParsingFlags();\n\n        return makeMoment(c).utc();\n    };\n\n    // creating with unix timestamp (in seconds)\n    moment.unix = function (input) {\n        return moment(input * 1000);\n    };\n\n    // duration\n    moment.duration = function (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            parseIso,\n            diffRes;\n\n        if (moment.isDuration(input)) {\n            duration = {\n                ms: input._milliseconds,\n                d: input._days,\n                M: input._months\n            };\n        } else if (typeof input === 'number') {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y: 0,\n                d: toInt(match[DATE]) * sign,\n                h: toInt(match[HOUR]) * sign,\n                m: toInt(match[MINUTE]) * sign,\n                s: toInt(match[SECOND]) * sign,\n                ms: toInt(match[MILLISECOND]) * sign\n            };\n        } else if (!!(match = isoDurationRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            parseIso = function (inp) {\n                // We'd normally use ~~inp for this, but unfortunately it also\n                // converts floats to ints.\n                // inp may be undefined, so careful calling replace on it.\n                var res = inp && parseFloat(inp.replace(',', '.'));\n                // apply sign while we're at it\n                return (isNaN(res) ? 0 : res) * sign;\n            };\n            duration = {\n                y: parseIso(match[2]),\n                M: parseIso(match[3]),\n                d: parseIso(match[4]),\n                h: parseIso(match[5]),\n                m: parseIso(match[6]),\n                s: parseIso(match[7]),\n                w: parseIso(match[8])\n            };\n        } else if (typeof duration === 'object' &&\n                ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(moment(duration.from), moment(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (moment.isDuration(input) && input.hasOwnProperty('_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    };\n\n    // version number\n    moment.version = VERSION;\n\n    // default format\n    moment.defaultFormat = isoFormat;\n\n    // constant that refers to the ISO standard\n    moment.ISO_8601 = function () {};\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    moment.momentProperties = momentProperties;\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    moment.updateOffset = function () {};\n\n    // This function allows you to set a threshold for relative time strings\n    moment.relativeTimeThreshold = function (threshold, limit) {\n        if (relativeTimeThresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return relativeTimeThresholds[threshold];\n        }\n        relativeTimeThresholds[threshold] = limit;\n        return true;\n    };\n\n    moment.lang = deprecate(\n        \"moment.lang is deprecated. Use moment.locale instead.\",\n        function (key, value) {\n            return moment.locale(key, value);\n        }\n    );\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    moment.locale = function (key, values) {\n        var data;\n        if (key) {\n            if (typeof(values) !== \"undefined\") {\n                data = moment.defineLocale(key, values);\n            }\n            else {\n                data = moment.localeData(key);\n            }\n\n            if (data) {\n                moment.duration._locale = moment._locale = data;\n            }\n        }\n\n        return moment._locale._abbr;\n    };\n\n    moment.defineLocale = function (name, values) {\n        if (values !== null) {\n            values.abbr = name;\n            if (!locales[name]) {\n                locales[name] = new Locale();\n            }\n            locales[name].set(values);\n\n            // backwards compat for now: also set the locale\n            moment.locale(name);\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    };\n\n    moment.langData = deprecate(\n        \"moment.langData is deprecated. Use moment.localeData instead.\",\n        function (key) {\n            return moment.localeData(key);\n        }\n    );\n\n    // returns locale data\n    moment.localeData = function (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return moment._locale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    };\n\n    // compare moment object\n    moment.isMoment = function (obj) {\n        return obj instanceof Moment ||\n            (obj != null &&  obj.hasOwnProperty('_isAMomentObject'));\n    };\n\n    // for typechecking Duration objects\n    moment.isDuration = function (obj) {\n        return obj instanceof Duration;\n    };\n\n    for (i = lists.length - 1; i >= 0; --i) {\n        makeList(lists[i]);\n    }\n\n    moment.normalizeUnits = function (units) {\n        return normalizeUnits(units);\n    };\n\n    moment.invalid = function (flags) {\n        var m = moment.utc(NaN);\n        if (flags != null) {\n            extend(m._pf, flags);\n        }\n        else {\n            m._pf.userInvalidated = true;\n        }\n\n        return m;\n    };\n\n    moment.parseZone = function () {\n        return moment.apply(null, arguments).parseZone();\n    };\n\n    moment.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    /************************************\n        Moment Prototype\n    ************************************/\n\n\n    extend(moment.fn = Moment.prototype, {\n\n        clone : function () {\n            return moment(this);\n        },\n\n        valueOf : function () {\n            return +this._d + ((this._offset || 0) * 60000);\n        },\n\n        unix : function () {\n            return Math.floor(+this / 1000);\n        },\n\n        toString : function () {\n            return this.clone().locale('en').format(\"ddd MMM DD YYYY HH:mm:ss [GMT]ZZ\");\n        },\n\n        toDate : function () {\n            return this._offset ? new Date(+this) : this._d;\n        },\n\n        toISOString : function () {\n            var m = moment(this).utc();\n            if (0 < m.year() && m.year() <= 9999) {\n                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n            } else {\n                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n            }\n        },\n\n        toArray : function () {\n            var m = this;\n            return [\n                m.year(),\n                m.month(),\n                m.date(),\n                m.hours(),\n                m.minutes(),\n                m.seconds(),\n                m.milliseconds()\n            ];\n        },\n\n        isValid : function () {\n            return isValid(this);\n        },\n\n        isDSTShifted : function () {\n            if (this._a) {\n                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;\n            }\n\n            return false;\n        },\n\n        parsingFlags : function () {\n            return extend({}, this._pf);\n        },\n\n        invalidAt: function () {\n            return this._pf.overflow;\n        },\n\n        utc : function (keepLocalTime) {\n            return this.zone(0, keepLocalTime);\n        },\n\n        local : function (keepLocalTime) {\n            if (this._isUTC) {\n                this.zone(0, keepLocalTime);\n                this._isUTC = false;\n\n                if (keepLocalTime) {\n                    this.add(this._d.getTimezoneOffset(), 'm');\n                }\n            }\n            return this;\n        },\n\n        format : function (inputString) {\n            var output = formatMoment(this, inputString || moment.defaultFormat);\n            return this.localeData().postformat(output);\n        },\n\n        add : createAdder(1, 'add'),\n\n        subtract : createAdder(-1, 'subtract'),\n\n        diff : function (input, units, asFloat) {\n            var that = makeAs(input, this),\n                zoneDiff = (this.zone() - that.zone()) * 6e4,\n                diff, output;\n\n            units = normalizeUnits(units);\n\n            if (units === 'year' || units === 'month') {\n                // average number of days in the months in the given dates\n                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2\n                // difference in months\n                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());\n                // adjust by taking difference in days, average number of days\n                // and dst in the given months.\n                output += ((this - moment(this).startOf('month')) -\n                        (that - moment(that).startOf('month'))) / diff;\n                // same as above but with zones, to negate all dst\n                output -= ((this.zone() - moment(this).startOf('month').zone()) -\n                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;\n                if (units === 'year') {\n                    output = output / 12;\n                }\n            } else {\n                diff = (this - that);\n                output = units === 'second' ? diff / 1e3 : // 1000\n                    units === 'minute' ? diff / 6e4 : // 1000 * 60\n                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60\n                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n                    diff;\n            }\n            return asFloat ? output : absRound(output);\n        },\n\n        from : function (time, withoutSuffix) {\n            return moment.duration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        },\n\n        fromNow : function (withoutSuffix) {\n            return this.from(moment(), withoutSuffix);\n        },\n\n        calendar : function (time) {\n            // We want to compare the start of today, vs this.\n            // Getting start-of-today depends on whether we're zone'd or not.\n            var now = time || moment(),\n                sod = makeAs(now, this).startOf('day'),\n                diff = this.diff(sod, 'days', true),\n                format = diff < -6 ? 'sameElse' :\n                    diff < -1 ? 'lastWeek' :\n                    diff < 0 ? 'lastDay' :\n                    diff < 1 ? 'sameDay' :\n                    diff < 2 ? 'nextDay' :\n                    diff < 7 ? 'nextWeek' : 'sameElse';\n            return this.format(this.localeData().calendar(format, this));\n        },\n\n        isLeapYear : function () {\n            return isLeapYear(this.year());\n        },\n\n        isDST : function () {\n            return (this.zone() < this.clone().month(0).zone() ||\n                this.zone() < this.clone().month(5).zone());\n        },\n\n        day : function (input) {\n            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n            if (input != null) {\n                input = parseWeekday(input, this.localeData());\n                return this.add(input - day, 'd');\n            } else {\n                return day;\n            }\n        },\n\n        month : makeAccessor('Month', true),\n\n        startOf : function (units) {\n            units = normalizeUnits(units);\n            // the following switch intentionally omits break keywords\n            // to utilize falling through the cases.\n            switch (units) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'quarter':\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'week':\n            case 'isoWeek':\n            case 'day':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n                /* falls through */\n            }\n\n            // weeks are a special case\n            if (units === 'week') {\n                this.weekday(0);\n            } else if (units === 'isoWeek') {\n                this.isoWeekday(1);\n            }\n\n            // quarters are also special\n            if (units === 'quarter') {\n                this.month(Math.floor(this.month() / 3) * 3);\n            }\n\n            return this;\n        },\n\n        endOf: function (units) {\n            units = normalizeUnits(units);\n            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n        },\n\n        isAfter: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) > +moment(input).startOf(units);\n        },\n\n        isBefore: function (input, units) {\n            units = typeof units !== 'undefined' ? units : 'millisecond';\n            return +this.clone().startOf(units) < +moment(input).startOf(units);\n        },\n\n        isSame: function (input, units) {\n            units = units || 'ms';\n            return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);\n        },\n\n        min: deprecate(\n                 'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',\n                 function (other) {\n                     other = moment.apply(null, arguments);\n                     return other < this ? this : other;\n                 }\n         ),\n\n        max: deprecate(\n                'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',\n                function (other) {\n                    other = moment.apply(null, arguments);\n                    return other > this ? this : other;\n                }\n        ),\n\n        // keepLocalTime = true means only change the timezone, without\n        // affecting the local hour. So 5:31:26 +0300 --[zone(2, true)]-->\n        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist int zone\n        // +0200, so we adjust the time as needed, to be valid.\n        //\n        // Keeping the time actually adds/subtracts (one hour)\n        // from the actual represented time. That is why we call updateOffset\n        // a second time. In case it wants us to change the offset again\n        // _changeInProgress == true case, then we have to adjust, because\n        // there is no such time in the given timezone.\n        zone : function (input, keepLocalTime) {\n            var offset = this._offset || 0,\n                localAdjust;\n            if (input != null) {\n                if (typeof input === 'string') {\n                    input = timezoneMinutesFromString(input);\n                }\n                if (Math.abs(input) < 16) {\n                    input = input * 60;\n                }\n                if (!this._isUTC && keepLocalTime) {\n                    localAdjust = this._d.getTimezoneOffset();\n                }\n                this._offset = input;\n                this._isUTC = true;\n                if (localAdjust != null) {\n                    this.subtract(localAdjust, 'm');\n                }\n                if (offset !== input) {\n                    if (!keepLocalTime || this._changeInProgress) {\n                        addOrSubtractDurationFromMoment(this,\n                                moment.duration(offset - input, 'm'), 1, false);\n                    } else if (!this._changeInProgress) {\n                        this._changeInProgress = true;\n                        moment.updateOffset(this, true);\n                        this._changeInProgress = null;\n                    }\n                }\n            } else {\n                return this._isUTC ? offset : this._d.getTimezoneOffset();\n            }\n            return this;\n        },\n\n        zoneAbbr : function () {\n            return this._isUTC ? 'UTC' : '';\n        },\n\n        zoneName : function () {\n            return this._isUTC ? 'Coordinated Universal Time' : '';\n        },\n\n        parseZone : function () {\n            if (this._tzm) {\n                this.zone(this._tzm);\n            } else if (typeof this._i === 'string') {\n                this.zone(this._i);\n            }\n            return this;\n        },\n\n        hasAlignedHourOffset : function (input) {\n            if (!input) {\n                input = 0;\n            }\n            else {\n                input = moment(input).zone();\n            }\n\n            return (this.zone() - input) % 60 === 0;\n        },\n\n        daysInMonth : function () {\n            return daysInMonth(this.year(), this.month());\n        },\n\n        dayOfYear : function (input) {\n            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;\n            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n        },\n\n        quarter : function (input) {\n            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n        },\n\n        weekYear : function (input) {\n            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;\n            return input == null ? year : this.add((input - year), 'y');\n        },\n\n        isoWeekYear : function (input) {\n            var year = weekOfYear(this, 1, 4).year;\n            return input == null ? year : this.add((input - year), 'y');\n        },\n\n        week : function (input) {\n            var week = this.localeData().week(this);\n            return input == null ? week : this.add((input - week) * 7, 'd');\n        },\n\n        isoWeek : function (input) {\n            var week = weekOfYear(this, 1, 4).week;\n            return input == null ? week : this.add((input - week) * 7, 'd');\n        },\n\n        weekday : function (input) {\n            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n            return input == null ? weekday : this.add(input - weekday, 'd');\n        },\n\n        isoWeekday : function (input) {\n            // behaves the same as moment#day except\n            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n            // as a setter, sunday should belong to the previous week.\n            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);\n        },\n\n        isoWeeksInYear : function () {\n            return weeksInYear(this.year(), 1, 4);\n        },\n\n        weeksInYear : function () {\n            var weekInfo = this.localeData()._week;\n            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n        },\n\n        get : function (units) {\n            units = normalizeUnits(units);\n            return this[units]();\n        },\n\n        set : function (units, value) {\n            units = normalizeUnits(units);\n            if (typeof this[units] === 'function') {\n                this[units](value);\n            }\n            return this;\n        },\n\n        // If passed a locale key, it will set the locale for this\n        // instance.  Otherwise, it will return the locale configuration\n        // variables for this instance.\n        locale : function (key) {\n            if (key === undefined) {\n                return this._locale._abbr;\n            } else {\n                this._locale = moment.localeData(key);\n                return this;\n            }\n        },\n\n        lang : deprecate(\n            \"moment().lang() is deprecated. Use moment().localeData() instead.\",\n            function (key) {\n                if (key === undefined) {\n                    return this.localeData();\n                } else {\n                    this._locale = moment.localeData(key);\n                    return this;\n                }\n            }\n        ),\n\n        localeData : function () {\n            return this._locale;\n        }\n    });\n\n    function rawMonthSetter(mom, value) {\n        var dayOfMonth;\n\n        // TODO: Move this out of here!\n        if (typeof value === 'string') {\n            value = mom.localeData().monthsParse(value);\n            // TODO: Another silent failure?\n            if (typeof value !== 'number') {\n                return mom;\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(),\n                daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function rawGetter(mom, unit) {\n        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();\n    }\n\n    function rawSetter(mom, unit, value) {\n        if (unit === 'Month') {\n            return rawMonthSetter(mom, value);\n        } else {\n            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n        }\n    }\n\n    function makeAccessor(unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                rawSetter(this, unit, value);\n                moment.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return rawGetter(this, unit);\n            }\n        };\n    }\n\n    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);\n    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);\n    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour he wants. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);\n    // moment.fn.month is defined separately\n    moment.fn.date = makeAccessor('Date', true);\n    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));\n    moment.fn.year = makeAccessor('FullYear', true);\n    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));\n\n    // add plural methods\n    moment.fn.days = moment.fn.day;\n    moment.fn.months = moment.fn.month;\n    moment.fn.weeks = moment.fn.week;\n    moment.fn.isoWeeks = moment.fn.isoWeek;\n    moment.fn.quarters = moment.fn.quarter;\n\n    // add aliased format methods\n    moment.fn.toJSON = moment.fn.toISOString;\n\n    /************************************\n        Duration Prototype\n    ************************************/\n\n\n    function daysToYears (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        return days * 400 / 146097;\n    }\n\n    function yearsToDays (years) {\n        // years * 365 + absRound(years / 4) -\n        //     absRound(years / 100) + absRound(years / 400);\n        return years * 146097 / 400;\n    }\n\n    extend(moment.duration.fn = Duration.prototype, {\n\n        _bubble : function () {\n            var milliseconds = this._milliseconds,\n                days = this._days,\n                months = this._months,\n                data = this._data,\n                seconds, minutes, hours, years = 0;\n\n            // The following code bubbles up values, see the tests for\n            // examples of what that means.\n            data.milliseconds = milliseconds % 1000;\n\n            seconds = absRound(milliseconds / 1000);\n            data.seconds = seconds % 60;\n\n            minutes = absRound(seconds / 60);\n            data.minutes = minutes % 60;\n\n            hours = absRound(minutes / 60);\n            data.hours = hours % 24;\n\n            days += absRound(hours / 24);\n\n            // Accurately convert days to years, assume start from year 0.\n            years = absRound(daysToYears(days));\n            days -= absRound(yearsToDays(years));\n\n            // 30 days to a month\n            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.\n            months += absRound(days / 30);\n            days %= 30;\n\n            // 12 months -> 1 year\n            years += absRound(months / 12);\n            months %= 12;\n\n            data.days = days;\n            data.months = months;\n            data.years = years;\n        },\n\n        abs : function () {\n            this._milliseconds = Math.abs(this._milliseconds);\n            this._days = Math.abs(this._days);\n            this._months = Math.abs(this._months);\n\n            this._data.milliseconds = Math.abs(this._data.milliseconds);\n            this._data.seconds = Math.abs(this._data.seconds);\n            this._data.minutes = Math.abs(this._data.minutes);\n            this._data.hours = Math.abs(this._data.hours);\n            this._data.months = Math.abs(this._data.months);\n            this._data.years = Math.abs(this._data.years);\n\n            return this;\n        },\n\n        weeks : function () {\n            return absRound(this.days() / 7);\n        },\n\n        valueOf : function () {\n            return this._milliseconds +\n              this._days * 864e5 +\n              (this._months % 12) * 2592e6 +\n              toInt(this._months / 12) * 31536e6;\n        },\n\n        humanize : function (withSuffix) {\n            var output = relativeTime(this, !withSuffix, this.localeData());\n\n            if (withSuffix) {\n                output = this.localeData().pastFuture(+this, output);\n            }\n\n            return this.localeData().postformat(output);\n        },\n\n        add : function (input, val) {\n            // supports only 2.0-style add(1, 's') or add(moment)\n            var dur = moment.duration(input, val);\n\n            this._milliseconds += dur._milliseconds;\n            this._days += dur._days;\n            this._months += dur._months;\n\n            this._bubble();\n\n            return this;\n        },\n\n        subtract : function (input, val) {\n            var dur = moment.duration(input, val);\n\n            this._milliseconds -= dur._milliseconds;\n            this._days -= dur._days;\n            this._months -= dur._months;\n\n            this._bubble();\n\n            return this;\n        },\n\n        get : function (units) {\n            units = normalizeUnits(units);\n            return this[units.toLowerCase() + 's']();\n        },\n\n        as : function (units) {\n            var days, months;\n            units = normalizeUnits(units);\n\n            days = this._days + this._milliseconds / 864e5;\n            if (units === 'month' || units === 'year') {\n                months = this._months + daysToYears(days) * 12;\n                return units === 'month' ? months : months / 12;\n            } else {\n                days += yearsToDays(this._months / 12);\n                switch (units) {\n                    case 'week': return days / 7;\n                    case 'day': return days;\n                    case 'hour': return days * 24;\n                    case 'minute': return days * 24 * 60;\n                    case 'second': return days * 24 * 60 * 60;\n                    case 'millisecond': return days * 24 * 60 * 60 * 1000;\n                    default: throw new Error('Unknown unit ' + units);\n                }\n            }\n        },\n\n        lang : moment.fn.lang,\n        locale : moment.fn.locale,\n\n        toIsoString : deprecate(\n            \"toIsoString() is deprecated. Please use toISOString() instead \" +\n            \"(notice the capitals)\",\n            function () {\n                return this.toISOString();\n            }\n        ),\n\n        toISOString : function () {\n            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n            var years = Math.abs(this.years()),\n                months = Math.abs(this.months()),\n                days = Math.abs(this.days()),\n                hours = Math.abs(this.hours()),\n                minutes = Math.abs(this.minutes()),\n                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);\n\n            if (!this.asSeconds()) {\n                // this is the same as C#'s (Noda) and python (isodate)...\n                // but not other JS (goog.date)\n                return 'P0D';\n            }\n\n            return (this.asSeconds() < 0 ? '-' : '') +\n                'P' +\n                (years ? years + 'Y' : '') +\n                (months ? months + 'M' : '') +\n                (days ? days + 'D' : '') +\n                ((hours || minutes || seconds) ? 'T' : '') +\n                (hours ? hours + 'H' : '') +\n                (minutes ? minutes + 'M' : '') +\n                (seconds ? seconds + 'S' : '');\n        },\n\n        localeData : function () {\n            return this._locale;\n        }\n    });\n\n    function makeDurationGetter(name) {\n        moment.duration.fn[name] = function () {\n            return this._data[name];\n        };\n    }\n\n    for (i in unitMillisecondFactors) {\n        if (unitMillisecondFactors.hasOwnProperty(i)) {\n            makeDurationGetter(i.toLowerCase());\n        }\n    }\n\n    moment.duration.fn.asMilliseconds = function () {\n        return this.as('ms');\n    };\n    moment.duration.fn.asSeconds = function () {\n        return this.as('s');\n    };\n    moment.duration.fn.asMinutes = function () {\n        return this.as('m');\n    };\n    moment.duration.fn.asHours = function () {\n        return this.as('h');\n    };\n    moment.duration.fn.asDays = function () {\n        return this.as('d');\n    };\n    moment.duration.fn.asWeeks = function () {\n        return this.as('weeks');\n    };\n    moment.duration.fn.asMonths = function () {\n        return this.as('M');\n    };\n    moment.duration.fn.asYears = function () {\n        return this.as('y');\n    };\n\n    /************************************\n        Default Locale\n    ************************************/\n\n\n    // Set default locale, other locale will inherit from English.\n    moment.locale('en', {\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    /* EMBED_LOCALES */\n\n    /************************************\n        Exposing Moment\n    ************************************/\n\n    function makeGlobal(shouldDeprecate) {\n        /*global ender:false */\n        if (typeof ender !== 'undefined') {\n            return;\n        }\n        oldGlobalMoment = globalScope.moment;\n        if (shouldDeprecate) {\n            globalScope.moment = deprecate(\n                    'Accessing Moment through the global scope is ' +\n                    'deprecated, and will be removed in an upcoming ' +\n                    'release.',\n                    moment);\n        } else {\n            globalScope.moment = moment;\n        }\n    }\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = moment;\n    } else if (typeof define === 'function' && define.amd) {\n        define('moment', function (require, exports, module) {\n            if (module.config && module.config() && module.config().noGlobal === true) {\n                // release the global variable\n                globalScope.moment = oldGlobalMoment;\n            }\n\n            return moment;\n        });\n        makeGlobal(true);\n    } else {\n        makeGlobal();\n    }\n}).call(this);\n","//This file exposes moment so that it works with Meteor 0.6.5's package system.\nif (typeof Package !== \"undefined\") {\n  moment = this.moment;\n}\n"]}