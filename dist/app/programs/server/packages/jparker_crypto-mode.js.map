{"version":3,"file":"/packages/jparker:crypto-mode.js","sources":["jparker:crypto-mode/lib/mode-cfb.js","jparker:crypto-mode/lib/mode-ctr-gladman.js","jparker:crypto-mode/lib/mode-ctr.js","jparker:crypto-mode/lib/mode-ecb.js","jparker:crypto-mode/lib/mode-ofb.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,G;AACA,8B;AACA,G;AACA,kC;AACA,oD;;AAEA,gC;AACA,gD;AACA,wB;AACA,sC;AACA,6C;;AAEA,qF;;AAEA,yD;AACA,sE;AACA,S;AACA,O;;AAEA,gC;AACA,gD;AACA,wB;AACA,sC;AACA,6C;;AAEA,yD;AACA,oE;;AAEA,qF;;AAEA,oD;AACA,wC;AACA,S;AACA,O;;AAEA,4E;AACA,mB;AACA,0B;;AAEA,6B;AACA,iB;AACA,wC;;AAEA,8C;AACA,iC;AACA,gB;AACA,4C;AACA,S;AACA,0C;;AAEA,kB;AACA,6C;AACA,8C;AACA,S;AACA,K;;AAEA,e;AACA,K;;;;;;;;;;;;;;;;;;ACzDA,a;AACA,iE;AACA,iC;AACA,iC;AACA,G;AACA,yC;AACA,2D;;AAEA,uB;AACA,E;AACA,kD;AACA,6B;AACA,4B;AACA,uB;;AAEA,iC;AACA,G;AACA,S;AACA,kB;AACA,G;AACA,U;AACA,mB;AACA,I;AACA,W;AACA,I;AACA,O;AACA,I;AACA,S;AACA,I;AACA,G;AACA,M;AACA,G;AACA,Q;AACA,G;AACA,G;AACA,M;AACA,G;AACA,O;AACA,G;;AAEA,W;AACA,qB;AACA,oB;AACA,a;AACA,G;AACA,M;AACA,G;AACA,uB;AACA,G;AACA,c;AACA,E;;AAEA,6B;AACA,E;AACA,+C;AACA,G;AACA,kF;AACA,oC;AACA,G;AACA,iB;AACA,E;;AAEA,8D;AACA,gD;AACA,wB;AACA,qC;AACA,6C;AACA,8B;AACA,wC;;AAEA,iC;AACA,qB;AACA,sD;;AAEA,kD;AACA,qC;AACA,a;;AAEA,uB;;AAEA,oC;AACA,8C;;AAEA,sB;AACA,iD;AACA,kD;AACA,a;AACA,S;AACA,O;;AAEA,qC;;AAEA,sB;AACA,K;;;;;;;;;;;;;;;;;;;;AC7FA,G;AACA,sB;AACA,G;AACA,kC;AACA,oD;;AAEA,gD;AACA,gD;AACA,wB;AACA,qC;AACA,6C;AACA,8B;AACA,wC;;AAEA,iC;AACA,qB;AACA,sD;;AAEA,kD;AACA,qC;AACA,a;AACA,6C;AACA,8C;;AAEA,gC;AACA,qE;;AAEA,sB;AACA,iD;AACA,kD;AACA,a;AACA,S;AACA,O;;AAEA,8B;;AAEA,e;AACA,K;;;;;;;;;;;;;;;;;;ACrCA,G;AACA,kC;AACA,G;AACA,kC;AACA,oD;;AAEA,gC;AACA,gD;AACA,qD;AACA,S;AACA,O;;AAEA,gC;AACA,gD;AACA,qD;AACA,S;AACA,O;;AAEA,e;AACA,K;;;;;;;;;;;;;;;;;;ACnBA,G;AACA,8B;AACA,G;AACA,kC;AACA,oD;;AAEA,gD;AACA,gD;AACA,wB;AACA,qC;AACA,6C;AACA,8B;AACA,4C;;AAEA,iC;AACA,qB;AACA,0D;;AAEA,kD;AACA,qC;AACA,a;AACA,8C;;AAEA,sB;AACA,iD;AACA,kD;AACA,a;AACA,S;AACA,O;;AAEA,8B;;AAEA,e;AACA,K","sourcesContent":["/**\n * Cipher Feedback block mode.\n */\nCryptoJS.mode.CFB = (function () {\n    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n    CFB.Encryptor = CFB.extend({\n        processBlock: function (words, offset) {\n            // Shortcuts\n            var cipher = this._cipher;\n            var blockSize = cipher.blockSize;\n\n            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n            // Remember this block to use with next block\n            this._prevBlock = words.slice(offset, offset + blockSize);\n        }\n    });\n\n    CFB.Decryptor = CFB.extend({\n        processBlock: function (words, offset) {\n            // Shortcuts\n            var cipher = this._cipher;\n            var blockSize = cipher.blockSize;\n\n            // Remember this block to use with next block\n            var thisBlock = words.slice(offset, offset + blockSize);\n\n            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n            // This block becomes the previous block\n            this._prevBlock = thisBlock;\n        }\n    });\n\n    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n        // Shortcut\n        var iv = this._iv;\n\n        // Generate keystream\n        if (iv) {\n            var keystream = iv.slice(0);\n\n            // Remove IV for subsequent blocks\n            this._iv = undefined;\n        } else {\n            var keystream = this._prevBlock;\n        }\n        cipher.encryptBlock(keystream, 0);\n\n        // Encrypt\n        for (var i = 0; i < blockSize; i++) {\n            words[offset + i] ^= keystream[i];\n        }\n    }\n\n    return CFB;\n}());","/** @preserve\n * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n * derived from CryptoJS.mode.CTR\n * Jan Hruby jhruby.web@gmail.com\n */\nCryptoJS.mode.CTRGladman = (function () {\n    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\tfunction incWord(word)\n\t{\n\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\tvar b1 = (word >> 16)&0xff;\n\t\tvar b2 = (word >> 8)&0xff;\n\t\tvar b3 = word & 0xff;\n\n\t\tif (b1 === 0xff) // overflow b1\n\t\t{\n\t\tb1 = 0;\n\t\tif (b2 === 0xff)\n\t\t{\n\t\t\tb2 = 0;\n\t\t\tif (b3 === 0xff)\n\t\t\t{\n\t\t\t\tb3 = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b3;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t++b2;\n\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t++b1;\n\t\t}\n\n\t\tword = 0;\n\t\tword += (b1 << 16);\n\t\tword += (b2 << 8);\n\t\tword += b3;\n\t\t}\n\t\telse\n\t\t{\n\t\tword += (0x01 << 24);\n\t\t}\n\t\treturn word;\n\t}\n\n\tfunction incCounter(counter)\n\t{\n\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t{\n\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n\t\t\tcounter[1] = incWord(counter[1]);\n\t\t}\n\t\treturn counter;\n\t}\n\n    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n        processBlock: function (words, offset) {\n            // Shortcuts\n            var cipher = this._cipher\n            var blockSize = cipher.blockSize;\n            var iv = this._iv;\n            var counter = this._counter;\n\n            // Generate keystream\n            if (iv) {\n                counter = this._counter = iv.slice(0);\n\n                // Remove IV for subsequent blocks\n                this._iv = undefined;\n            }\n\n\t\t\tincCounter(counter);\n\n\t\t\tvar keystream = counter.slice(0);\n            cipher.encryptBlock(keystream, 0);\n\n            // Encrypt\n            for (var i = 0; i < blockSize; i++) {\n                words[offset + i] ^= keystream[i];\n            }\n        }\n    });\n\n    CTRGladman.Decryptor = Encryptor;\n\n    return CTRGladman;\n}());\n\n","/**\n * Counter block mode.\n */\nCryptoJS.mode.CTR = (function () {\n    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n    var Encryptor = CTR.Encryptor = CTR.extend({\n        processBlock: function (words, offset) {\n            // Shortcuts\n            var cipher = this._cipher\n            var blockSize = cipher.blockSize;\n            var iv = this._iv;\n            var counter = this._counter;\n\n            // Generate keystream\n            if (iv) {\n                counter = this._counter = iv.slice(0);\n\n                // Remove IV for subsequent blocks\n                this._iv = undefined;\n            }\n            var keystream = counter.slice(0);\n            cipher.encryptBlock(keystream, 0);\n\n            // Increment counter\n            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n            // Encrypt\n            for (var i = 0; i < blockSize; i++) {\n                words[offset + i] ^= keystream[i];\n            }\n        }\n    });\n\n    CTR.Decryptor = Encryptor;\n\n    return CTR;\n}());","/**\n * Electronic Codebook block mode.\n */\nCryptoJS.mode.ECB = (function () {\n    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n    ECB.Encryptor = ECB.extend({\n        processBlock: function (words, offset) {\n            this._cipher.encryptBlock(words, offset);\n        }\n    });\n\n    ECB.Decryptor = ECB.extend({\n        processBlock: function (words, offset) {\n            this._cipher.decryptBlock(words, offset);\n        }\n    });\n\n    return ECB;\n}());","/**\n * Output Feedback block mode.\n */\nCryptoJS.mode.OFB = (function () {\n    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n    var Encryptor = OFB.Encryptor = OFB.extend({\n        processBlock: function (words, offset) {\n            // Shortcuts\n            var cipher = this._cipher\n            var blockSize = cipher.blockSize;\n            var iv = this._iv;\n            var keystream = this._keystream;\n\n            // Generate keystream\n            if (iv) {\n                keystream = this._keystream = iv.slice(0);\n\n                // Remove IV for subsequent blocks\n                this._iv = undefined;\n            }\n            cipher.encryptBlock(keystream, 0);\n\n            // Encrypt\n            for (var i = 0; i < blockSize; i++) {\n                words[offset + i] ^= keystream[i];\n            }\n        }\n    });\n\n    OFB.Decryptor = Encryptor;\n\n    return OFB;\n}());"]}