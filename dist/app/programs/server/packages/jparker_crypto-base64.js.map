{"version":3,"file":"/packages/jparker:crypto-base64.js","sources":["jparker:crypto-base64/lib/enc-base64.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,E;AACA,e;AACA,2B;AACA,gD;AACA,wC;AACA,E;AACA,c;AACA,gB;AACA,qB;AACA,sB;AACA,oC;AACA,sB;;AAEA,O;AACA,gC;AACA,O;AACA,iC;AACA,W;AACA,oD;AACA,U;AACA,uD;AACA,U;AACA,8C;AACA,U;AACA,kB;AACA,U;AACA,mB;AACA,U;AACA,2E;AACA,W;AACA,yC;AACA,wB;AACA,wC;AACA,8C;AACA,gC;;AAEA,gC;AACA,8B;;AAEA,sB;AACA,iC;AACA,mD;AACA,uF;AACA,uF;AACA,uF;;AAEA,mE;;AAEA,4E;AACA,qF;AACA,iB;AACA,a;;AAEA,0B;AACA,6C;AACA,8B;AACA,gD;AACA,kD;AACA,iB;AACA,a;;AAEA,wC;AACA,U;;AAEA,W;AACA,oD;AACA,U;AACA,uD;AACA,U;AACA,8C;AACA,U;AACA,kB;AACA,U;AACA,mB;AACA,U;AACA,uE;AACA,W;AACA,qC;AACA,wB;AACA,mD;AACA,gC;;AAEA,6B;AACA,6C;AACA,8B;AACA,kE;AACA,yC;AACA,mD;AACA,iB;AACA,a;;AAEA,sB;AACA,2B;AACA,2B;AACA,uD;AACA,4B;AACA,sF;AACA,uF;AACA,sF;AACA,6B;AACA,iB;AACA,a;;AAEA,mD;AACA,U;;AAEA,iF;AACA,M;AACA,K","sourcesContent":["/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n     * Base64 encoding strategy.\n     */\n    var Base64 = C_enc.Base64 = {\n        /**\n         * Converts a word array to a Base64 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Base64 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n            var map = this._map;\n\n            // Clamp excess bits\n            wordArray.clamp();\n\n            // Convert\n            var base64Chars = [];\n            for (var i = 0; i < sigBytes; i += 3) {\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n                }\n            }\n\n            // Add padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                while (base64Chars.length % 4) {\n                    base64Chars.push(paddingChar);\n                }\n            }\n\n            return base64Chars.join('');\n        },\n\n        /**\n         * Converts a Base64 string to a word array.\n         *\n         * @param {string} base64Str The Base64 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n         */\n        parse: function (base64Str) {\n            // Shortcuts\n            var base64StrLength = base64Str.length;\n            var map = this._map;\n\n            // Ignore padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                var paddingIndex = base64Str.indexOf(paddingChar);\n                if (paddingIndex != -1) {\n                    base64StrLength = paddingIndex;\n                }\n            }\n\n            // Convert\n            var words = [];\n            var nBytes = 0;\n            for (var i = 0; i < base64StrLength; i++) {\n                if (i % 4) {\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n                    nBytes++;\n                }\n            }\n\n            return WordArray.create(words, nBytes);\n        },\n\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n}());\n"]}