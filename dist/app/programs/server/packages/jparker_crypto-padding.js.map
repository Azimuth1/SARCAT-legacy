{"version":3,"file":"/packages/jparker:crypto-padding.js","sources":["jparker:crypto-padding/lib/pad-ansix923.js","jparker:crypto-padding/lib/pad-iso10126.js","jparker:crypto-padding/lib/pad-iso97971.js","jparker:crypto-padding/lib/pad-nopadding.js","jparker:crypto-padding/lib/pad-zeropadding.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,G;AACA,+B;AACA,G;AACA,yB;AACA,qC;AACA,oB;AACA,yC;AACA,2C;;AAEA,8B;AACA,2E;;AAEA,qC;AACA,2D;;AAEA,c;AACA,qB;AACA,uF;AACA,uC;AACA,M;;AAEA,4B;AACA,qD;AACA,yE;;AAEA,yB;AACA,uC;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;AC5BA,G;AACA,8B;AACA,G;AACA,yB;AACA,qC;AACA,mB;AACA,2C;;AAEA,8B;AACA,4E;;AAEA,c;AACA,sE;AACA,6E;AACA,M;;AAEA,4B;AACA,qD;AACA,yE;;AAEA,yB;AACA,uC;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;ACvBA,G;AACA,mC;AACA,G;AACA,yB;AACA,qC;AACA,wB;AACA,oE;;AAEA,4B;AACA,sD;AACA,M;;AAEA,4B;AACA,8B;AACA,6C;;AAEA,gD;AACA,wB;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;ACnBA,G;AACA,2B;AACA,G;AACA,0B;AACA,sB;AACA,M;;AAEA,wB;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;ACTA,G;AACA,yB;AACA,G;AACA,4B;AACA,qC;AACA,mB;AACA,2C;;AAEA,c;AACA,qB;AACA,+F;AACA,M;;AAEA,4B;AACA,mB;AACA,mC;;AAEA,gB;AACA,kC;AACA,uE;AACA,gB;AACA,S;AACA,8B;AACA,K;AACA,E","sourcesContent":["/**\n * ANSI X.923 padding strategy.\n */\nCryptoJS.pad.AnsiX923 = {\n    pad: function (data, blockSize) {\n        // Shortcuts\n        var dataSigBytes = data.sigBytes;\n        var blockSizeBytes = blockSize * 4;\n\n        // Count padding bytes\n        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n\n        // Compute last byte position\n        var lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n        // Pad\n        data.clamp();\n        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);\n        data.sigBytes += nPaddingBytes;\n    },\n\n    unpad: function (data) {\n        // Get number of padding bytes from last byte\n        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n        // Remove padding\n        data.sigBytes -= nPaddingBytes;\n    }\n};","/**\n * ISO 10126 padding strategy.\n */\nCryptoJS.pad.Iso10126 = {\n    pad: function (data, blockSize) {\n        // Shortcut\n        var blockSizeBytes = blockSize * 4;\n\n        // Count padding bytes\n        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n        // Pad\n        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n    },\n\n    unpad: function (data) {\n        // Get number of padding bytes from last byte\n        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n        // Remove padding\n        data.sigBytes -= nPaddingBytes;\n    }\n};","/**\n * ISO/IEC 9797-1 Padding Method 2.\n */\nCryptoJS.pad.Iso97971 = {\n    pad: function (data, blockSize) {\n        // Add 0x80 byte\n        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));\n\n        // Zero pad the rest\n        CryptoJS.pad.ZeroPadding.pad(data, blockSize);\n    },\n\n    unpad: function (data) {\n        // Remove zero padding\n        CryptoJS.pad.ZeroPadding.unpad(data);\n\n        // Remove one more byte -- the 0x80 byte\n        data.sigBytes--;\n    }\n};","/**\n * A noop padding strategy.\n */\nCryptoJS.pad.NoPadding = {\n    pad: function () {\n    },\n\n    unpad: function () {\n    }\n};","/**\n * Zero padding strategy.\n */\nCryptoJS.pad.ZeroPadding = {\n    pad: function (data, blockSize) {\n        // Shortcut\n        var blockSizeBytes = blockSize * 4;\n\n        // Pad\n        data.clamp();\n        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);\n    },\n\n    unpad: function (data) {\n        // Shortcut\n        var dataWords = data.words;\n\n        // Unpad\n        var i = data.sigBytes - 1;\n        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {\n            i--;\n        }\n        data.sigBytes = i + 1;\n    }\n};"]}