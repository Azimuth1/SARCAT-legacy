{"version":3,"file":"/packages/jparker:crypto-evpkdf.js","sources":["jparker:crypto-evpkdf/lib/evpkdf.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,E;AACA,e;AACA,2B;AACA,gD;AACA,wC;AACA,E;AACA,c;AACA,gB;AACA,qB;AACA,sB;AACA,0B;AACA,oC;AACA,wB;AACA,yB;;AAEA,O;AACA,4E;AACA,sD;AACA,O;AACA,8C;AACA,W;AACA,iC;AACA,U;AACA,8F;AACA,4E;AACA,wF;AACA,W;AACA,0B;AACA,4B;AACA,wB;AACA,yB;AACA,W;;AAEA,W;AACA,+D;AACA,U;AACA,8F;AACA,U;AACA,mB;AACA,U;AACA,uD;AACA,qE;AACA,uF;AACA,W;AACA,8B;AACA,4C;AACA,U;;AAEA,W;AACA,yC;AACA,U;AACA,2D;AACA,iD;AACA,U;AACA,+C;AACA,U;AACA,mB;AACA,U;AACA,qD;AACA,W;AACA,4C;AACA,uB;AACA,+B;;AAEA,0B;AACA,6C;;AAEA,6B;AACA,gD;;AAEA,wB;AACA,mD;AACA,sC;AACA,4C;;AAEA,2B;AACA,sD;AACA,4B;AACA,yC;AACA,iB;AACA,mE;AACA,+B;;AAEA,6B;AACA,sD;AACA,mD;AACA,mC;AACA,iB;;AAEA,yC;AACA,a;AACA,8C;;AAEA,8B;AACA,S;AACA,O;;AAEA,O;AACA,qC;AACA,M;AACA,uD;AACA,6C;AACA,4F;AACA,M;AACA,2C;AACA,M;AACA,c;AACA,M;AACA,e;AACA,M;AACA,qD;AACA,qE;AACA,uF;AACA,O;AACA,+C;AACA,0D;AACA,M;AACA,K","sourcesContent":["/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var WordArray = C_lib.WordArray;\n    var C_algo = C.algo;\n    var MD5 = C_algo.MD5;\n\n    /**\n     * This key derivation function is meant to conform with EVP_BytesToKey.\n     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n     */\n    var EvpKDF = C_algo.EvpKDF = Base.extend({\n        /**\n         * Configuration options.\n         *\n         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n         * @property {number} iterations The number of iterations to perform. Default: 1\n         */\n        cfg: Base.extend({\n            keySize: 128/32,\n            hasher: MD5,\n            iterations: 1\n        }),\n\n        /**\n         * Initializes a newly created key derivation function.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n         *\n         * @example\n         *\n         *     var kdf = CryptoJS.algo.EvpKDF.create();\n         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n         */\n        init: function (cfg) {\n            this.cfg = this.cfg.extend(cfg);\n        },\n\n        /**\n         * Derives a key from a password.\n         *\n         * @param {WordArray|string} password The password.\n         * @param {WordArray|string} salt A salt.\n         *\n         * @return {WordArray} The derived key.\n         *\n         * @example\n         *\n         *     var key = kdf.compute(password, salt);\n         */\n        compute: function (password, salt) {\n            // Shortcut\n            var cfg = this.cfg;\n\n            // Init hasher\n            var hasher = cfg.hasher.create();\n\n            // Initial values\n            var derivedKey = WordArray.create();\n\n            // Shortcuts\n            var derivedKeyWords = derivedKey.words;\n            var keySize = cfg.keySize;\n            var iterations = cfg.iterations;\n\n            // Generate key\n            while (derivedKeyWords.length < keySize) {\n                if (block) {\n                    hasher.update(block);\n                }\n                var block = hasher.update(password).finalize(salt);\n                hasher.reset();\n\n                // Iterations\n                for (var i = 1; i < iterations; i++) {\n                    block = hasher.finalize(block);\n                    hasher.reset();\n                }\n\n                derivedKey.concat(block);\n            }\n            derivedKey.sigBytes = keySize * 4;\n\n            return derivedKey;\n        }\n    });\n\n    /**\n     * Derives a key from a password.\n     *\n     * @param {WordArray|string} password The password.\n     * @param {WordArray|string} salt A salt.\n     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n     *\n     * @return {WordArray} The derived key.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var key = CryptoJS.EvpKDF(password, salt);\n     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n     */\n    C.EvpKDF = function (password, salt, cfg) {\n        return EvpKDF.create(cfg).compute(password, salt);\n    };\n}());\n"]}